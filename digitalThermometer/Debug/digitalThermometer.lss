
digitalThermometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006a  0080006a  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5b  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  00002043  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a62  00000000  00000000  00002901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001163  00000000  00000000  00003b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ed       	ldi	r30, 0xDA	; 218
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	0a d1       	rcall	.+532    	; 0x26e <main>
  5a:	bd c1       	rjmp	.+890    	; 0x3d6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcdSendNibble>:
    while (lcdIsBusy());

    lcdRawSendByte((0b00011000 | dir), LCD_COMMAND);
    pos--;
  }
}
  5e:	97 b3       	in	r25, 0x17	; 23
  60:	97 60       	ori	r25, 0x07	; 7
  62:	97 bb       	out	0x17, r25	; 23
  64:	97 b3       	in	r25, 0x17	; 23
  66:	98 67       	ori	r25, 0x78	; 120
  68:	97 bb       	out	0x17, r25	; 23
  6a:	c1 98       	cbi	0x18, 1	; 24
  6c:	66 23       	and	r22, r22
  6e:	11 f0       	breq	.+4      	; 0x74 <lcdSendNibble+0x16>
  70:	c0 9a       	sbi	0x18, 0	; 24
  72:	01 c0       	rjmp	.+2      	; 0x76 <lcdSendNibble+0x18>
  74:	c0 98       	cbi	0x18, 0	; 24
  76:	c2 9a       	sbi	0x18, 2	; 24
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	97 78       	andi	r25, 0x87	; 135
  7c:	98 bb       	out	0x18, r25	; 24
  7e:	83 fd       	sbrc	r24, 3
  80:	c6 9a       	sbi	0x18, 6	; 24
  82:	82 fd       	sbrc	r24, 2
  84:	c5 9a       	sbi	0x18, 5	; 24
  86:	81 fd       	sbrc	r24, 1
  88:	c4 9a       	sbi	0x18, 4	; 24
  8a:	80 fd       	sbrc	r24, 0
  8c:	c3 9a       	sbi	0x18, 3	; 24
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <lcdSendNibble+0x32>
  94:	00 00       	nop
  96:	c2 98       	cbi	0x18, 2	; 24
  98:	08 95       	ret

0000009a <lcdRawSendByte>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c8 2f       	mov	r28, r24
  a0:	d6 2f       	mov	r29, r22
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	db df       	rcall	.-74     	; 0x5e <lcdSendNibble>
  a8:	6d 2f       	mov	r22, r29
  aa:	8c 2f       	mov	r24, r28
  ac:	d8 df       	rcall	.-80     	; 0x5e <lcdSendNibble>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <lcdInit>:
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcdInit+0x4>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcdInit+0xa>
  be:	00 00       	nop
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	cc df       	rcall	.-104    	; 0x5e <lcdSendNibble>
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcdInit+0x16>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcdInit+0x1c>
  d0:	00 00       	nop
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	e1 df       	rcall	.-62     	; 0x9a <lcdRawSendByte>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdInit+0x28>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	d8 df       	rcall	.-80     	; 0x9a <lcdRawSendByte>
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__stack+0xf>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__stack+0x15>
  f4:	00 00       	nop
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	cf df       	rcall	.-98     	; 0x9a <lcdRawSendByte>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__stack+0x21>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__stack+0x27>
 106:	00 00       	nop
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	c6 df       	rcall	.-116    	; 0x9a <lcdRawSendByte>
 10e:	08 95       	ret

00000110 <lcdSetCursor>:
 110:	ef ec       	ldi	r30, 0xCF	; 207
 112:	f7 e0       	ldi	r31, 0x07	; 7
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdSetCursor+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcdSetCursor+0xa>
 11a:	00 00       	nop
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8c 60       	ori	r24, 0x0C	; 12
 120:	bc df       	rcall	.-136    	; 0x9a <lcdRawSendByte>
 122:	08 95       	ret

00000124 <lcdSetDisplay>:
 124:	ef ec       	ldi	r30, 0xCF	; 207
 126:	f7 e0       	ldi	r31, 0x07	; 7
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdSetDisplay+0x4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdSetDisplay+0xa>
 12e:	00 00       	nop
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	88 60       	ori	r24, 0x08	; 8
 134:	b2 df       	rcall	.-156    	; 0x9a <lcdRawSendByte>
 136:	08 95       	ret

00000138 <lcdClear>:
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdClear+0x4>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdClear+0xa>
 142:	00 00       	nop
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	a8 df       	rcall	.-176    	; 0x9a <lcdRawSendByte>
 14a:	08 95       	ret

0000014c <lcdGotoXY>:
 14c:	ef ec       	ldi	r30, 0xCF	; 207
 14e:	f7 e0       	ldi	r31, 0x07	; 7
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcdGotoXY+0x4>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcdGotoXY+0xa>
 156:	00 00       	nop
 158:	82 95       	swap	r24
 15a:	88 0f       	add	r24, r24
 15c:	88 0f       	add	r24, r24
 15e:	80 7c       	andi	r24, 0xC0	; 192
 160:	86 0f       	add	r24, r22
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 68       	ori	r24, 0x80	; 128
 166:	99 df       	rcall	.-206    	; 0x9a <lcdRawSendByte>
 168:	08 95       	ret

0000016a <lcdPuts>:

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
  while (*str) {
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z
 172:	22 23       	and	r18, r18
 174:	69 f0       	breq	.+26     	; 0x190 <lcdPuts+0x26>
 176:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcdPuts+0x12>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcdPuts+0x18>
 182:	00 00       	nop
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 91       	ld	r24, Y+
 188:	88 df       	rcall	.-240    	; 0x9a <lcdRawSendByte>

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
  while (*str) {
 18a:	88 81       	ld	r24, Y
 18c:	81 11       	cpse	r24, r1
 18e:	f4 cf       	rjmp	.-24     	; 0x178 <lcdPuts+0xe>
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
  }
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <print_humidity>:
		_delay_ms(1000);
	}
}

void print_humidity(char* buffer)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	lcdGotoXY(0,0);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	d5 df       	rcall	.-86     	; 0x14c <lcdGotoXY>
	lcdPuts("H=");
 1a2:	80 e6       	ldi	r24, 0x60	; 96
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	e1 df       	rcall	.-62     	; 0x16a <lcdPuts>
	lcdGotoXY(0,2);
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	cf df       	rcall	.-98     	; 0x14c <lcdGotoXY>
	itoa(humidityResult, buffer, DOZEN);
 1ae:	4a e0       	ldi	r20, 0x0A	; 10
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	be 01       	movw	r22, r28
 1b4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <humidityResult>
 1b8:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <humidityResult+0x1>
 1bc:	cf d0       	rcall	.+414    	; 0x35c <itoa>
	lcdPuts(buffer);
 1be:	ce 01       	movw	r24, r28
 1c0:	d4 df       	rcall	.-88     	; 0x16a <lcdPuts>
	lcdGotoXY(0, 5);
 1c2:	65 e0       	ldi	r22, 0x05	; 5
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	c2 df       	rcall	.-124    	; 0x14c <lcdGotoXY>
	lcdPuts("%");
 1c8:	83 e6       	ldi	r24, 0x63	; 99
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ce df       	rcall	.-100    	; 0x16a <lcdPuts>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <print_temperature>:

void print_temperature(char* buffer, uint16_t temp_after_point)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
	lcdGotoXY(1,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	b6 df       	rcall	.-148    	; 0x14c <lcdGotoXY>
	lcdPuts("T=");
 1e0:	85 e6       	ldi	r24, 0x65	; 101
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	c2 df       	rcall	.-124    	; 0x16a <lcdPuts>
	lcdGotoXY(1,2);
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	b0 df       	rcall	.-160    	; 0x14c <lcdGotoXY>
	itoa(temperatureResult, buffer, DEC);
 1ec:	4a e0       	ldi	r20, 0x0A	; 10
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	be 01       	movw	r22, r28
 1f2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <temperatureResult>
 1f6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <temperatureResult+0x1>
 1fa:	b0 d0       	rcall	.+352    	; 0x35c <itoa>
	lcdPuts(buffer);
 1fc:	ce 01       	movw	r24, r28
 1fe:	b5 df       	rcall	.-150    	; 0x16a <lcdPuts>
	lcdGotoXY(1,6);
 200:	66 e0       	ldi	r22, 0x06	; 6
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	a3 df       	rcall	.-186    	; 0x14c <lcdGotoXY>
	lcdPuts("C");
 206:	88 e6       	ldi	r24, 0x68	; 104
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	af df       	rcall	.-162    	; 0x16a <lcdPuts>
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <request>:

void request()                /* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT22_PIN);
 212:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT22_PIN);    /* set to low pin */
 214:	96 98       	cbi	0x12, 6	; 18
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	9c e9       	ldi	r25, 0x9C	; 156
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <request+0x8>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <request+0xe>
 220:	00 00       	nop
	_delay_ms(20);            /* wait for 20ms */
	PORTD |= (1<<DHT22_PIN);	/* set to high pin */
 222:	96 9a       	sbi	0x12, 6	; 18
 224:	08 95       	ret

00000226 <response>:
}

void response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT22_PIN);
 226:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT22_PIN));
 228:	86 99       	sbic	0x10, 6	; 16
 22a:	fe cf       	rjmp	.-4      	; 0x228 <response+0x2>
	while((PIND & (1<<DHT22_PIN))==0);
 22c:	86 9b       	sbis	0x10, 6	; 16
 22e:	fe cf       	rjmp	.-4      	; 0x22c <response+0x6>
	while(PIND & (1<<DHT22_PIN));
 230:	86 99       	sbic	0x10, 6	; 16
 232:	fe cf       	rjmp	.-4      	; 0x230 <response+0xa>
}
 234:	08 95       	ret

00000236 <receive_data>:

uint8_t receive_data()			/* receive data */
{
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	for (i=0; i<8; i++)
	{
		while((PIND & (1<<DHT22_PIN)) == 0);  /* check received bit 0 or 1 */
 23a:	86 9b       	sbis	0x10, 6	; 16
 23c:	fe cf       	rjmp	.-4      	; 0x23a <receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	20 e5       	ldi	r18, 0x50	; 80
 240:	2a 95       	dec	r18
 242:	f1 f7       	brne	.-4      	; 0x240 <receive_data+0xa>
		_delay_us(30);
		if(PIND & (1<<DHT22_PIN))/* if high pulse is greater than 30ms */
 244:	86 9b       	sbis	0x10, 6	; 16
 246:	07 c0       	rjmp	.+14     	; 0x256 <receive_data+0x20>
		data = (data<<1)|(0x01);	/* then its logic HIGH */
 248:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 24c:	22 0f       	add	r18, r18
 24e:	21 60       	ori	r18, 0x01	; 1
 250:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
 254:	05 c0       	rjmp	.+10     	; 0x260 <receive_data+0x2a>
		else			/* otherwise its logic LOW */
		data = (data<<1);
 256:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 25a:	22 0f       	add	r18, r18
 25c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
		while(PIND & (1<<DHT22_PIN));
 260:	86 99       	sbic	0x10, 6	; 16
 262:	fe cf       	rjmp	.-4      	; 0x260 <receive_data+0x2a>
 264:	01 97       	sbiw	r24, 0x01	; 1
}

uint8_t receive_data()			/* receive data */
{
	int i;
	for (i=0; i<8; i++)
 266:	49 f7       	brne	.-46     	; 0x23a <receive_data+0x4>
		else			/* otherwise its logic LOW */
		data = (data<<1);
		while(PIND & (1<<DHT22_PIN));
	}
	return data;
}
 268:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 26c:	08 95       	ret

0000026e <main>:
void request();                /* Microcontroller send start pulse/request */
void response();				/* receive response from DHT11 */
uint8_t receive_data();			/* receive data */
int get_checksum();

int main(void) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	dd 27       	eor	r29, r29
 276:	c3 50       	subi	r28, 0x03	; 3
 278:	cd bf       	out	0x3d, r28	; 61
	
	char buffer[STRING_SIZE];
	uint16_t temp_buffer;
    uint16_t temp_buffer_after_point;

	lcdInit();
 27a:	1c df       	rcall	.-456    	; 0xb4 <lcdInit>
	lcdClear();
 27c:	5d df       	rcall	.-326    	; 0x138 <lcdClear>
	lcdSetDisplay(LCD_DISPLAY_ON);
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	51 df       	rcall	.-350    	; 0x124 <lcdSetDisplay>
	lcdSetCursor(LCD_CURSOR_OFF);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	45 df       	rcall	.-374    	; 0x110 <lcdSetCursor>
			//lcdGotoXY(1,0);
			//lcdPuts("Err     ");
		//}
		//else
		//{
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 286:	0a e0       	ldi	r16, 0x0A	; 10
 288:	10 e0       	ldi	r17, 0x00	; 0
	lcdSetDisplay(LCD_DISPLAY_ON);
	lcdSetCursor(LCD_CURSOR_OFF);
	
	while (1) {

		request();		/* send start pulse */
 28a:	c3 df       	rcall	.-122    	; 0x212 <request>
		response();		/* receive response */
 28c:	cc df       	rcall	.-104    	; 0x226 <response>
		lowByteRh=receive_data();	/* store first eight bit in I_RH */
 28e:	d3 df       	rcall	.-90     	; 0x236 <receive_data>
 290:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <lowByteRh>
		highByteRh=receive_data();	/* store next eight bit in D_RH */
 294:	d0 df       	rcall	.-96     	; 0x236 <receive_data>
 296:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <highByteRh>
		lowByteTemp=receive_data();	/* store next eight bit in I_Temp */
 29a:	cd df       	rcall	.-102    	; 0x236 <receive_data>
 29c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <lowByteTemp>
		highByteTemp=receive_data();	/* store next eight bit in D_Temp */
 2a0:	ca df       	rcall	.-108    	; 0x236 <receive_data>
 2a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <highByteTemp>
		checkSum=receive_data();/* store next eight bit in CheckSum */
 2a6:	c7 df       	rcall	.-114    	; 0x236 <receive_data>
 2a8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <checkSum>
		print_humidity(buffer);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	72 df       	rcall	.-284    	; 0x196 <print_humidity>
			//lcdGotoXY(1,0);
			//lcdPuts("Err     ");
		//}
		//else
		//{
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 2b2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lowByteRh>
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	98 2f       	mov	r25, r24
 2ba:	88 27       	eor	r24, r24
 2bc:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <highByteRh>
 2c0:	82 0f       	add	r24, r18
 2c2:	91 1d       	adc	r25, r1
 2c4:	b8 01       	movw	r22, r16
 2c6:	23 d0       	rcall	.+70     	; 0x30e <__divmodhi4>
 2c8:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <humidityResult+0x1>
 2cc:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <humidityResult>
			print_humidity(buffer);
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	60 df       	rcall	.-320    	; 0x196 <print_humidity>
			
			temperatureResult = (lowByteTemp * 256 + highByteTemp );
 2d6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <lowByteTemp>
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	98 2f       	mov	r25, r24
 2de:	88 27       	eor	r24, r24
 2e0:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <highByteTemp>
 2e4:	82 0f       	add	r24, r18
 2e6:	91 1d       	adc	r25, r1
 2e8:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <temperatureResult+0x1>
 2ec:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <temperatureResult>
			//temp_buffer = temperatureResult;
			//temp_buffer_after_point = temp_buffer % DOZEN;
			print_temperature(buffer, temp_buffer_after_point);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	6d df       	rcall	.-294    	; 0x1d4 <print_temperature>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	89 e6       	ldi	r24, 0x69	; 105
 2fe:	98 e1       	ldi	r25, 0x18	; 24
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x92>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x9c>
 30a:	00 00       	nop
 30c:	be cf       	rjmp	.-132    	; 0x28a <main+0x1c>

0000030e <__divmodhi4>:
 30e:	97 fb       	bst	r25, 7
 310:	07 2e       	mov	r0, r23
 312:	16 f4       	brtc	.+4      	; 0x318 <__divmodhi4+0xa>
 314:	00 94       	com	r0
 316:	06 d0       	rcall	.+12     	; 0x324 <__divmodhi4_neg1>
 318:	77 fd       	sbrc	r23, 7
 31a:	08 d0       	rcall	.+16     	; 0x32c <__divmodhi4_neg2>
 31c:	0b d0       	rcall	.+22     	; 0x334 <__udivmodhi4>
 31e:	07 fc       	sbrc	r0, 7
 320:	05 d0       	rcall	.+10     	; 0x32c <__divmodhi4_neg2>
 322:	3e f4       	brtc	.+14     	; 0x332 <__divmodhi4_exit>

00000324 <__divmodhi4_neg1>:
 324:	90 95       	com	r25
 326:	81 95       	neg	r24
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	08 95       	ret

0000032c <__divmodhi4_neg2>:
 32c:	70 95       	com	r23
 32e:	61 95       	neg	r22
 330:	7f 4f       	sbci	r23, 0xFF	; 255

00000332 <__divmodhi4_exit>:
 332:	08 95       	ret

00000334 <__udivmodhi4>:
 334:	aa 1b       	sub	r26, r26
 336:	bb 1b       	sub	r27, r27
 338:	51 e1       	ldi	r21, 0x11	; 17
 33a:	07 c0       	rjmp	.+14     	; 0x34a <__udivmodhi4_ep>

0000033c <__udivmodhi4_loop>:
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	a6 17       	cp	r26, r22
 342:	b7 07       	cpc	r27, r23
 344:	10 f0       	brcs	.+4      	; 0x34a <__udivmodhi4_ep>
 346:	a6 1b       	sub	r26, r22
 348:	b7 0b       	sbc	r27, r23

0000034a <__udivmodhi4_ep>:
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	5a 95       	dec	r21
 350:	a9 f7       	brne	.-22     	; 0x33c <__udivmodhi4_loop>
 352:	80 95       	com	r24
 354:	90 95       	com	r25
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	08 95       	ret

0000035c <itoa>:
 35c:	45 32       	cpi	r20, 0x25	; 37
 35e:	51 05       	cpc	r21, r1
 360:	18 f4       	brcc	.+6      	; 0x368 <itoa+0xc>
 362:	42 30       	cpi	r20, 0x02	; 2
 364:	08 f0       	brcs	.+2      	; 0x368 <itoa+0xc>
 366:	04 c0       	rjmp	.+8      	; 0x370 <__itoa_ncheck>
 368:	fb 01       	movw	r30, r22
 36a:	10 82       	st	Z, r1
 36c:	cb 01       	movw	r24, r22
 36e:	08 95       	ret

00000370 <__itoa_ncheck>:
 370:	bb 27       	eor	r27, r27
 372:	4a 30       	cpi	r20, 0x0A	; 10
 374:	31 f4       	brne	.+12     	; 0x382 <__itoa_ncheck+0x12>
 376:	99 23       	and	r25, r25
 378:	22 f4       	brpl	.+8      	; 0x382 <__itoa_ncheck+0x12>
 37a:	bd e2       	ldi	r27, 0x2D	; 45
 37c:	90 95       	com	r25
 37e:	81 95       	neg	r24
 380:	9f 4f       	sbci	r25, 0xFF	; 255
 382:	01 c0       	rjmp	.+2      	; 0x386 <__utoa_common>

00000384 <__utoa_ncheck>:
 384:	bb 27       	eor	r27, r27

00000386 <__utoa_common>:
 386:	fb 01       	movw	r30, r22
 388:	55 27       	eor	r21, r21
 38a:	aa 27       	eor	r26, r26
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	aa 1f       	adc	r26, r26
 392:	a4 17       	cp	r26, r20
 394:	10 f0       	brcs	.+4      	; 0x39a <__utoa_common+0x14>
 396:	a4 1b       	sub	r26, r20
 398:	83 95       	inc	r24
 39a:	50 51       	subi	r21, 0x10	; 16
 39c:	b9 f7       	brne	.-18     	; 0x38c <__utoa_common+0x6>
 39e:	a0 5d       	subi	r26, 0xD0	; 208
 3a0:	aa 33       	cpi	r26, 0x3A	; 58
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <__utoa_common+0x20>
 3a4:	a9 5d       	subi	r26, 0xD9	; 217
 3a6:	a1 93       	st	Z+, r26
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	79 f7       	brne	.-34     	; 0x38a <__utoa_common+0x4>
 3ac:	b1 11       	cpse	r27, r1
 3ae:	b1 93       	st	Z+, r27
 3b0:	11 92       	st	Z+, r1
 3b2:	cb 01       	movw	r24, r22
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <strrev>

000003b6 <strrev>:
 3b6:	dc 01       	movw	r26, r24
 3b8:	fc 01       	movw	r30, r24
 3ba:	67 2f       	mov	r22, r23
 3bc:	71 91       	ld	r23, Z+
 3be:	77 23       	and	r23, r23
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <strrev+0x4>
 3c2:	32 97       	sbiw	r30, 0x02	; 2
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <strrev+0x18>
 3c6:	7c 91       	ld	r23, X
 3c8:	6d 93       	st	X+, r22
 3ca:	70 83       	st	Z, r23
 3cc:	62 91       	ld	r22, -Z
 3ce:	ae 17       	cp	r26, r30
 3d0:	bf 07       	cpc	r27, r31
 3d2:	c8 f3       	brcs	.-14     	; 0x3c6 <strrev+0x10>
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
