
digitalThermometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800086  00800086  00000b58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cf4  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090c  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acf  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00003dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001340  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000596c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e9       	ldi	r30, 0x9E	; 158
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 38       	cpi	r26, 0x86	; 134
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e8       	ldi	r26, 0x86	; 134
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 39       	cpi	r26, 0x90	; 144
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	71 d1       	rcall	.+738    	; 0x33c <main>
  5a:	1f c5       	rjmp	.+2622   	; 0xa9a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcdSendNibble>:
    while (lcdIsBusy());

    lcdRawSendByte((0b00011000 | dir), LCD_COMMAND);
    pos--;
  }
}
  5e:	97 b3       	in	r25, 0x17	; 23
  60:	97 60       	ori	r25, 0x07	; 7
  62:	97 bb       	out	0x17, r25	; 23
  64:	97 b3       	in	r25, 0x17	; 23
  66:	98 67       	ori	r25, 0x78	; 120
  68:	97 bb       	out	0x17, r25	; 23
  6a:	c1 98       	cbi	0x18, 1	; 24
  6c:	66 23       	and	r22, r22
  6e:	11 f0       	breq	.+4      	; 0x74 <lcdSendNibble+0x16>
  70:	c0 9a       	sbi	0x18, 0	; 24
  72:	01 c0       	rjmp	.+2      	; 0x76 <lcdSendNibble+0x18>
  74:	c0 98       	cbi	0x18, 0	; 24
  76:	c2 9a       	sbi	0x18, 2	; 24
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	97 78       	andi	r25, 0x87	; 135
  7c:	98 bb       	out	0x18, r25	; 24
  7e:	83 fd       	sbrc	r24, 3
  80:	c6 9a       	sbi	0x18, 6	; 24
  82:	82 fd       	sbrc	r24, 2
  84:	c5 9a       	sbi	0x18, 5	; 24
  86:	81 fd       	sbrc	r24, 1
  88:	c4 9a       	sbi	0x18, 4	; 24
  8a:	80 fd       	sbrc	r24, 0
  8c:	c3 9a       	sbi	0x18, 3	; 24
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <lcdSendNibble+0x32>
  94:	00 00       	nop
  96:	c2 98       	cbi	0x18, 2	; 24
  98:	08 95       	ret

0000009a <lcdRawSendByte>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c8 2f       	mov	r28, r24
  a0:	d6 2f       	mov	r29, r22
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	db df       	rcall	.-74     	; 0x5e <lcdSendNibble>
  a8:	6d 2f       	mov	r22, r29
  aa:	8c 2f       	mov	r24, r28
  ac:	d8 df       	rcall	.-80     	; 0x5e <lcdSendNibble>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <lcdInit>:
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcdInit+0x4>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcdInit+0xa>
  be:	00 00       	nop
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	cc df       	rcall	.-104    	; 0x5e <lcdSendNibble>
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcdInit+0x16>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcdInit+0x1c>
  d0:	00 00       	nop
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	e1 df       	rcall	.-62     	; 0x9a <lcdRawSendByte>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdInit+0x28>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	d8 df       	rcall	.-80     	; 0x9a <lcdRawSendByte>
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__stack+0xf>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__stack+0x15>
  f4:	00 00       	nop
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	cf df       	rcall	.-98     	; 0x9a <lcdRawSendByte>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__stack+0x21>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__stack+0x27>
 106:	00 00       	nop
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	c6 df       	rcall	.-116    	; 0x9a <lcdRawSendByte>
 10e:	08 95       	ret

00000110 <lcdSetCursor>:
 110:	ef ec       	ldi	r30, 0xCF	; 207
 112:	f7 e0       	ldi	r31, 0x07	; 7
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdSetCursor+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcdSetCursor+0xa>
 11a:	00 00       	nop
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8c 60       	ori	r24, 0x0C	; 12
 120:	bc df       	rcall	.-136    	; 0x9a <lcdRawSendByte>
 122:	08 95       	ret

00000124 <lcdSetDisplay>:
 124:	ef ec       	ldi	r30, 0xCF	; 207
 126:	f7 e0       	ldi	r31, 0x07	; 7
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdSetDisplay+0x4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdSetDisplay+0xa>
 12e:	00 00       	nop
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	88 60       	ori	r24, 0x08	; 8
 134:	b2 df       	rcall	.-156    	; 0x9a <lcdRawSendByte>
 136:	08 95       	ret

00000138 <lcdClear>:
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdClear+0x4>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdClear+0xa>
 142:	00 00       	nop
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	a8 df       	rcall	.-176    	; 0x9a <lcdRawSendByte>
 14a:	08 95       	ret

0000014c <lcdGotoXY>:
 14c:	ef ec       	ldi	r30, 0xCF	; 207
 14e:	f7 e0       	ldi	r31, 0x07	; 7
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcdGotoXY+0x4>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcdGotoXY+0xa>
 156:	00 00       	nop
 158:	82 95       	swap	r24
 15a:	88 0f       	add	r24, r24
 15c:	88 0f       	add	r24, r24
 15e:	80 7c       	andi	r24, 0xC0	; 192
 160:	86 0f       	add	r24, r22
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 68       	ori	r24, 0x80	; 128
 166:	99 df       	rcall	.-206    	; 0x9a <lcdRawSendByte>
 168:	08 95       	ret

0000016a <lcdPuts>:

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
  while (*str) {
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z
 172:	22 23       	and	r18, r18
 174:	69 f0       	breq	.+26     	; 0x190 <lcdPuts+0x26>
 176:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcdPuts+0x12>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcdPuts+0x18>
 182:	00 00       	nop
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 91       	ld	r24, Y+
 188:	88 df       	rcall	.-240    	; 0x9a <lcdRawSendByte>

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
  while (*str) {
 18a:	88 81       	ld	r24, Y
 18c:	81 11       	cpse	r24, r1
 18e:	f4 cf       	rjmp	.-24     	; 0x178 <lcdPuts+0xe>
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
  }
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <print_humidity>:
		_delay_ms(1000);
	}
}

void print_humidity(char* buffer)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	lcdGotoXY(0,0);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	d5 df       	rcall	.-86     	; 0x14c <lcdGotoXY>
	lcdPuts("H=");
 1a2:	80 e6       	ldi	r24, 0x60	; 96
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	e1 df       	rcall	.-62     	; 0x16a <lcdPuts>
	lcdGotoXY(0,2);
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	cf df       	rcall	.-98     	; 0x14c <lcdGotoXY>
	itoa(humidityResult, buffer, DOZEN);
 1ae:	4a e0       	ldi	r20, 0x0A	; 10
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	be 01       	movw	r22, r28
 1b4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <humidityResult>
 1b8:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <humidityResult+0x1>
 1bc:	57 d1       	rcall	.+686    	; 0x46c <itoa>
	lcdPuts(buffer);
 1be:	ce 01       	movw	r24, r28
 1c0:	d4 df       	rcall	.-88     	; 0x16a <lcdPuts>
	lcdGotoXY(0, 5);
 1c2:	65 e0       	ldi	r22, 0x05	; 5
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	c2 df       	rcall	.-124    	; 0x14c <lcdGotoXY>
	lcdPuts("%");
 1c8:	83 e6       	ldi	r24, 0x63	; 99
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ce df       	rcall	.-100    	; 0x16a <lcdPuts>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <print_negative_temperature>:

void print_negative_temperature(char* buffer, int negativeTemp){
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	08 2f       	mov	r16, r24
 1de:	19 2f       	mov	r17, r25
 1e0:	eb 01       	movw	r28, r22
	
	if(negativeTemp < negativePointShift) {
 1e2:	66 3f       	cpi	r22, 0xF6	; 246
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	bc f4       	brge	.+46     	; 0x216 <print_negative_temperature+0x42>
		lcdGotoXY(1,0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	af df       	rcall	.-162    	; 0x14c <lcdGotoXY>
		sprintf(buffer, "T = %d", negativeTemp/10);
 1ee:	ce 01       	movw	r24, r28
 1f0:	6a e0       	ldi	r22, 0x0A	; 10
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	28 d1       	rcall	.+592    	; 0x446 <__divmodhi4>
 1f6:	7f 93       	push	r23
 1f8:	6f 93       	push	r22
 1fa:	85 e6       	ldi	r24, 0x65	; 101
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9f 93       	push	r25
 200:	8f 93       	push	r24
 202:	1f 93       	push	r17
 204:	0f 93       	push	r16
 206:	5f d1       	rcall	.+702    	; 0x4c6 <sprintf>
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	1c c0       	rjmp	.+56     	; 0x24e <print_negative_temperature+0x7a>
		//lcdPuts(buffer);
		//lcdGotoXY(1,4);
		//lcdPuts("C");
	}
	else{
		lcdGotoXY(1,0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	98 df       	rcall	.-208    	; 0x14c <lcdGotoXY>
		lcdPuts("T=");
 21c:	8c e6       	ldi	r24, 0x6C	; 108
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	a4 df       	rcall	.-184    	; 0x16a <lcdPuts>
		lcdGotoXY(1,2);
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	92 df       	rcall	.-220    	; 0x14c <lcdGotoXY>
		itoa(negativeTemp/DEC, buffer, DEC);
 228:	ce 01       	movw	r24, r28
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0b d1       	rcall	.+534    	; 0x446 <__divmodhi4>
 230:	cb 01       	movw	r24, r22
 232:	4a e0       	ldi	r20, 0x0A	; 10
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	60 2f       	mov	r22, r16
 238:	71 2f       	mov	r23, r17
 23a:	18 d1       	rcall	.+560    	; 0x46c <itoa>
		lcdPuts(buffer);
 23c:	80 2f       	mov	r24, r16
 23e:	91 2f       	mov	r25, r17
 240:	94 df       	rcall	.-216    	; 0x16a <lcdPuts>
		lcdGotoXY(1,5);
 242:	65 e0       	ldi	r22, 0x05	; 5
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	82 df       	rcall	.-252    	; 0x14c <lcdGotoXY>
		lcdPuts("C");
 248:	8f e6       	ldi	r24, 0x6F	; 111
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	8e df       	rcall	.-228    	; 0x16a <lcdPuts>
	}
	
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <print_temperature>:

void print_temperature(char* buffer, uint16_t temp_after_point)
{
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
 262:	8b 01       	movw	r16, r22
	lcdGotoXY(1,0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	71 df       	rcall	.-286    	; 0x14c <lcdGotoXY>
	lcdPuts("T=");
 26a:	8c e6       	ldi	r24, 0x6C	; 108
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	7d df       	rcall	.-262    	; 0x16a <lcdPuts>
	lcdGotoXY(1,2);
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	6b df       	rcall	.-298    	; 0x14c <lcdGotoXY>
	itoa(temperatureResult, buffer, DEC);
 276:	4a e0       	ldi	r20, 0x0A	; 10
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	be 01       	movw	r22, r28
 27c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <temperatureResult>
 280:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <temperatureResult+0x1>
 284:	f3 d0       	rcall	.+486    	; 0x46c <itoa>
	lcdPuts(buffer);
 286:	ce 01       	movw	r24, r28
 288:	70 df       	rcall	.-288    	; 0x16a <lcdPuts>
	lcdGotoXY(1,4);
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	5e df       	rcall	.-324    	; 0x14c <lcdGotoXY>
	lcdPuts(".");
 290:	81 e7       	ldi	r24, 0x71	; 113
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	6a df       	rcall	.-300    	; 0x16a <lcdPuts>
	lcdGotoXY(1,5);
 296:	65 e0       	ldi	r22, 0x05	; 5
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	58 df       	rcall	.-336    	; 0x14c <lcdGotoXY>
	itoa(temp_after_point, buffer, DEC);
 29c:	4a e0       	ldi	r20, 0x0A	; 10
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	be 01       	movw	r22, r28
 2a2:	c8 01       	movw	r24, r16
 2a4:	e3 d0       	rcall	.+454    	; 0x46c <itoa>
	lcdPuts(buffer);
 2a6:	ce 01       	movw	r24, r28
 2a8:	60 df       	rcall	.-320    	; 0x16a <lcdPuts>
	lcdGotoXY(1,6);
 2aa:	66 e0       	ldi	r22, 0x06	; 6
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	4e df       	rcall	.-356    	; 0x14c <lcdGotoXY>
	lcdPuts("C");
 2b0:	8f e6       	ldi	r24, 0x6F	; 111
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	5a df       	rcall	.-332    	; 0x16a <lcdPuts>
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <request>:

void request()                /* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT22_PIN);
 2c0:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT22_PIN);    /* set to low pin */
 2c2:	96 98       	cbi	0x12, 6	; 18
 2c4:	8f e3       	ldi	r24, 0x3F	; 63
 2c6:	9c e9       	ldi	r25, 0x9C	; 156
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <request+0x8>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <request+0xe>
 2ce:	00 00       	nop
	_delay_ms(20);            /* wait for 20ms */
	PORTD |= (1<<DHT22_PIN);	/* set to high pin */
 2d0:	96 9a       	sbi	0x12, 6	; 18
 2d2:	08 95       	ret

000002d4 <response>:
}

void response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT22_PIN);
 2d4:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT22_PIN));
 2d6:	86 99       	sbic	0x10, 6	; 16
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <response+0x2>
	while((PIND & (1<<DHT22_PIN))==0);
 2da:	86 9b       	sbis	0x10, 6	; 16
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <response+0x6>
	while(PIND & (1<<DHT22_PIN));
 2de:	86 99       	sbic	0x10, 6	; 16
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <response+0xa>
}
 2e2:	08 95       	ret

000002e4 <receive_data>:

uint8_t receive_data()			/* receive data */
{
 2e4:	88 e0       	ldi	r24, 0x08	; 8
 2e6:	90 e0       	ldi	r25, 0x00	; 0
	int q;
	for (q=0; q<8; q++)
	{
		while((PIND & (1<<DHT22_PIN)) == 0);  /* check received bit 0 or 1 */
 2e8:	86 9b       	sbis	0x10, 6	; 16
 2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	20 e5       	ldi	r18, 0x50	; 80
 2ee:	2a 95       	dec	r18
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <receive_data+0xa>
		_delay_us(30);
		if(PIND & (1<<DHT22_PIN))/* if high pulse is greater than 30ms */
 2f2:	86 9b       	sbis	0x10, 6	; 16
 2f4:	07 c0       	rjmp	.+14     	; 0x304 <receive_data+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 2f6:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__data_end>
 2fa:	22 0f       	add	r18, r18
 2fc:	21 60       	ori	r18, 0x01	; 1
 2fe:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__data_end>
 302:	05 c0       	rjmp	.+10     	; 0x30e <receive_data+0x2a>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 304:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__data_end>
 308:	22 0f       	add	r18, r18
 30a:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__data_end>
		while(PIND & (1<<DHT22_PIN));
 30e:	86 99       	sbic	0x10, 6	; 16
 310:	fe cf       	rjmp	.-4      	; 0x30e <receive_data+0x2a>
 312:	01 97       	sbiw	r24, 0x01	; 1
}

uint8_t receive_data()			/* receive data */
{
	int q;
	for (q=0; q<8; q++)
 314:	49 f7       	brne	.-46     	; 0x2e8 <receive_data+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT22_PIN));
	}
	return c;
}
 316:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 31a:	08 95       	ret

0000031c <get_checksum>:

int get_checksum(){
	
	return lowByteRh + highByteRh + lowByteTemp + highByteTemp;
 31c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <lowByteRh>
 320:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <highByteRh>
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	82 0f       	add	r24, r18
 328:	91 1d       	adc	r25, r1
 32a:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <lowByteTemp>
 32e:	82 0f       	add	r24, r18
 330:	91 1d       	adc	r25, r1
 332:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <highByteTemp>
}
 336:	82 0f       	add	r24, r18
 338:	91 1d       	adc	r25, r1
 33a:	08 95       	ret

0000033c <main>:
void request();                /* Microcontroller send start pulse/request */
void response();				/* receive response from DHT11 */
uint8_t receive_data();			/* receive data */
int get_checksum();

int main(void) {
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	dd 27       	eor	r29, r29
 344:	c6 50       	subi	r28, 0x06	; 6
 346:	cd bf       	out	0x3d, r28	; 61
	char tBuffer[STRING_SIZE], hBuffer[STRING_SIZE];
	uint16_t temp_buffer;
	uint16_t temp_buffer_after_point;
	int negativeTemp;

	lcdInit();
 348:	b5 de       	rcall	.-662    	; 0xb4 <lcdInit>
	lcdClear();
 34a:	f6 de       	rcall	.-532    	; 0x138 <lcdClear>
	lcdSetDisplay(LCD_DISPLAY_ON);
 34c:	84 e0       	ldi	r24, 0x04	; 4
 34e:	ea de       	rcall	.-556    	; 0x124 <lcdSetDisplay>
	lcdSetCursor(LCD_CURSOR_OFF);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	de de       	rcall	.-580    	; 0x110 <lcdSetCursor>
			lcdGotoXY(1,0);
			lcdPuts("Err     ");
		}
		else
		{
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 354:	0f 2e       	mov	r0, r31
 356:	fa e0       	ldi	r31, 0x0A	; 10
 358:	ef 2e       	mov	r14, r31
 35a:	f1 2c       	mov	r15, r1
 35c:	f0 2d       	mov	r31, r0
	lcdSetDisplay(LCD_DISPLAY_ON);
	lcdSetCursor(LCD_CURSOR_OFF);
	
	while (1) {

		request();		/* send start pulse */
 35e:	b0 df       	rcall	.-160    	; 0x2c0 <request>
		response();		/* receive response */
 360:	b9 df       	rcall	.-142    	; 0x2d4 <response>
		[1] RH decimal
		[2] Temp integral
		[3] Temp decimal
		[4] checksum is the sum of all four bytes AND 255
		*/
		lowByteRh=receive_data();	/* store first eight bit in I_RH */
 362:	c0 df       	rcall	.-128    	; 0x2e4 <receive_data>
 364:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <lowByteRh>
		highByteRh=receive_data();	/* store next eight bit in D_RH */
 368:	bd df       	rcall	.-134    	; 0x2e4 <receive_data>
 36a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <highByteRh>
		lowByteTemp=receive_data();	/* store next eight bit in I_Temp */
 36e:	ba df       	rcall	.-140    	; 0x2e4 <receive_data>
 370:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <lowByteTemp>
		highByteTemp=receive_data();	/* store next eight bit in D_Temp */
 374:	b7 df       	rcall	.-146    	; 0x2e4 <receive_data>
 376:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <highByteTemp>
		checkSum=receive_data();/* store next eight bit in CheckSum */
 37a:	b4 df       	rcall	.-152    	; 0x2e4 <receive_data>
 37c:	18 2f       	mov	r17, r24
 37e:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <checkSum>
		
		/* (DHTdata[0] + DHTdata[1] + DHTdata[2] + DHTdata[3]) & 255) will = DHTdata[4] IF the checksum is good. */
		if ((get_checksum() & 255) != checkSum)
 382:	cc df       	rcall	.-104    	; 0x31c <get_checksum>
 384:	99 27       	eor	r25, r25
 386:	21 2f       	mov	r18, r17
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	82 17       	cp	r24, r18
 38c:	93 07       	cpc	r25, r19
 38e:	69 f0       	breq	.+26     	; 0x3aa <main+0x6e>
		{
			lcdGotoXY(0,0);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	db de       	rcall	.-586    	; 0x14c <lcdGotoXY>
			lcdPuts("Sens    ");
 396:	83 e7       	ldi	r24, 0x73	; 115
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	e7 de       	rcall	.-562    	; 0x16a <lcdPuts>
			lcdGotoXY(1,0);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	d5 de       	rcall	.-598    	; 0x14c <lcdGotoXY>
			lcdPuts("Err     ");
 3a2:	8c e7       	ldi	r24, 0x7C	; 124
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	e1 de       	rcall	.-574    	; 0x16a <lcdPuts>
 3a8:	30 c0       	rjmp	.+96     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
		else
		{
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 3aa:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <lowByteRh>
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	98 2f       	mov	r25, r24
 3b2:	88 27       	eor	r24, r24
 3b4:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <highByteRh>
 3b8:	82 0f       	add	r24, r18
 3ba:	91 1d       	adc	r25, r1
 3bc:	b7 01       	movw	r22, r14
 3be:	43 d0       	rcall	.+134    	; 0x446 <__divmodhi4>
 3c0:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <humidityResult+0x1>
 3c4:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <humidityResult>
			print_humidity(hBuffer);
 3c8:	ce 01       	movw	r24, r28
 3ca:	04 96       	adiw	r24, 0x04	; 4
 3cc:	e4 de       	rcall	.-568    	; 0x196 <print_humidity>
			
			temperatureResult = (lowByteTemp * 256 + highByteTemp );
 3ce:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lowByteTemp>
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	98 2f       	mov	r25, r24
 3d6:	88 27       	eor	r24, r24
 3d8:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <highByteTemp>
 3dc:	82 0f       	add	r24, r18
 3de:	91 1d       	adc	r25, r1
 3e0:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <temperatureResult+0x1>
 3e4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <temperatureResult>
			
			if(temperatureResult > TEMP_MASK)
 3e8:	99 23       	and	r25, r25
 3ea:	4c f4       	brge	.+18     	; 0x3fe <main+0xc2>
			{
				negativeTemp = -(TEMP_MASK & temperatureResult);
				print_negative_temperature(tBuffer, negativeTemp);
 3ec:	9f 77       	andi	r25, 0x7F	; 127
 3ee:	66 27       	eor	r22, r22
 3f0:	77 27       	eor	r23, r23
 3f2:	68 1b       	sub	r22, r24
 3f4:	79 0b       	sbc	r23, r25
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	ec de       	rcall	.-552    	; 0x1d4 <print_negative_temperature>
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			}
			else{
				temp_buffer = temperatureResult;
				temp_buffer_after_point = temp_buffer % DOZEN;
				print_temperature(tBuffer, temp_buffer_after_point);
 3fe:	b7 01       	movw	r22, r14
 400:	0e d0       	rcall	.+28     	; 0x41e <__udivmodhi4>
 402:	bc 01       	movw	r22, r24
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	27 df       	rcall	.-434    	; 0x258 <print_temperature>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	89 e6       	ldi	r24, 0x69	; 105
 40e:	98 e1       	ldi	r25, 0x18	; 24
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	a0 cf       	rjmp	.-192    	; 0x35e <main+0x22>

0000041e <__udivmodhi4>:
 41e:	aa 1b       	sub	r26, r26
 420:	bb 1b       	sub	r27, r27
 422:	51 e1       	ldi	r21, 0x11	; 17
 424:	07 c0       	rjmp	.+14     	; 0x434 <__udivmodhi4_ep>

00000426 <__udivmodhi4_loop>:
 426:	aa 1f       	adc	r26, r26
 428:	bb 1f       	adc	r27, r27
 42a:	a6 17       	cp	r26, r22
 42c:	b7 07       	cpc	r27, r23
 42e:	10 f0       	brcs	.+4      	; 0x434 <__udivmodhi4_ep>
 430:	a6 1b       	sub	r26, r22
 432:	b7 0b       	sbc	r27, r23

00000434 <__udivmodhi4_ep>:
 434:	88 1f       	adc	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	5a 95       	dec	r21
 43a:	a9 f7       	brne	.-22     	; 0x426 <__udivmodhi4_loop>
 43c:	80 95       	com	r24
 43e:	90 95       	com	r25
 440:	bc 01       	movw	r22, r24
 442:	cd 01       	movw	r24, r26
 444:	08 95       	ret

00000446 <__divmodhi4>:
 446:	97 fb       	bst	r25, 7
 448:	07 2e       	mov	r0, r23
 44a:	16 f4       	brtc	.+4      	; 0x450 <__divmodhi4+0xa>
 44c:	00 94       	com	r0
 44e:	06 d0       	rcall	.+12     	; 0x45c <__divmodhi4_neg1>
 450:	77 fd       	sbrc	r23, 7
 452:	08 d0       	rcall	.+16     	; 0x464 <__divmodhi4_neg2>
 454:	e4 df       	rcall	.-56     	; 0x41e <__udivmodhi4>
 456:	07 fc       	sbrc	r0, 7
 458:	05 d0       	rcall	.+10     	; 0x464 <__divmodhi4_neg2>
 45a:	3e f4       	brtc	.+14     	; 0x46a <__divmodhi4_exit>

0000045c <__divmodhi4_neg1>:
 45c:	90 95       	com	r25
 45e:	81 95       	neg	r24
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <__divmodhi4_neg2>:
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255

0000046a <__divmodhi4_exit>:
 46a:	08 95       	ret

0000046c <itoa>:
 46c:	45 32       	cpi	r20, 0x25	; 37
 46e:	51 05       	cpc	r21, r1
 470:	18 f4       	brcc	.+6      	; 0x478 <itoa+0xc>
 472:	42 30       	cpi	r20, 0x02	; 2
 474:	08 f0       	brcs	.+2      	; 0x478 <itoa+0xc>
 476:	04 c0       	rjmp	.+8      	; 0x480 <__itoa_ncheck>
 478:	fb 01       	movw	r30, r22
 47a:	10 82       	st	Z, r1
 47c:	cb 01       	movw	r24, r22
 47e:	08 95       	ret

00000480 <__itoa_ncheck>:
 480:	bb 27       	eor	r27, r27
 482:	4a 30       	cpi	r20, 0x0A	; 10
 484:	31 f4       	brne	.+12     	; 0x492 <__itoa_ncheck+0x12>
 486:	99 23       	and	r25, r25
 488:	22 f4       	brpl	.+8      	; 0x492 <__itoa_ncheck+0x12>
 48a:	bd e2       	ldi	r27, 0x2D	; 45
 48c:	90 95       	com	r25
 48e:	81 95       	neg	r24
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	01 c0       	rjmp	.+2      	; 0x496 <__utoa_common>

00000494 <__utoa_ncheck>:
 494:	bb 27       	eor	r27, r27

00000496 <__utoa_common>:
 496:	fb 01       	movw	r30, r22
 498:	55 27       	eor	r21, r21
 49a:	aa 27       	eor	r26, r26
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	aa 1f       	adc	r26, r26
 4a2:	a4 17       	cp	r26, r20
 4a4:	10 f0       	brcs	.+4      	; 0x4aa <__utoa_common+0x14>
 4a6:	a4 1b       	sub	r26, r20
 4a8:	83 95       	inc	r24
 4aa:	50 51       	subi	r21, 0x10	; 16
 4ac:	b9 f7       	brne	.-18     	; 0x49c <__utoa_common+0x6>
 4ae:	a0 5d       	subi	r26, 0xD0	; 208
 4b0:	aa 33       	cpi	r26, 0x3A	; 58
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__utoa_common+0x20>
 4b4:	a9 5d       	subi	r26, 0xD9	; 217
 4b6:	a1 93       	st	Z+, r26
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	79 f7       	brne	.-34     	; 0x49a <__utoa_common+0x4>
 4bc:	b1 11       	cpse	r27, r1
 4be:	b1 93       	st	Z+, r27
 4c0:	11 92       	st	Z+, r1
 4c2:	cb 01       	movw	r24, r22
 4c4:	08 c2       	rjmp	.+1040   	; 0x8d6 <strrev>

000004c6 <sprintf>:
 4c6:	ae e0       	ldi	r26, 0x0E	; 14
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e8 e6       	ldi	r30, 0x68	; 104
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	c6 c2       	rjmp	.+1420   	; 0xa5c <__prologue_saves__+0x1c>
 4d0:	0d 89       	ldd	r16, Y+21	; 0x15
 4d2:	1e 89       	ldd	r17, Y+22	; 0x16
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	8c 83       	std	Y+4, r24	; 0x04
 4d8:	1a 83       	std	Y+2, r17	; 0x02
 4da:	09 83       	std	Y+1, r16	; 0x01
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	9f e7       	ldi	r25, 0x7F	; 127
 4e0:	9e 83       	std	Y+6, r25	; 0x06
 4e2:	8d 83       	std	Y+5, r24	; 0x05
 4e4:	ae 01       	movw	r20, r28
 4e6:	47 5e       	subi	r20, 0xE7	; 231
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ea:	6f 89       	ldd	r22, Y+23	; 0x17
 4ec:	78 8d       	ldd	r23, Y+24	; 0x18
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	08 d0       	rcall	.+16     	; 0x504 <vfprintf>
 4f4:	ef 81       	ldd	r30, Y+7	; 0x07
 4f6:	f8 85       	ldd	r31, Y+8	; 0x08
 4f8:	e0 0f       	add	r30, r16
 4fa:	f1 1f       	adc	r31, r17
 4fc:	10 82       	st	Z, r1
 4fe:	2e 96       	adiw	r28, 0x0e	; 14
 500:	e4 e0       	ldi	r30, 0x04	; 4
 502:	c3 c2       	rjmp	.+1414   	; 0xa8a <__epilogue_restores__+0x1c>

00000504 <vfprintf>:
 504:	ab e0       	ldi	r26, 0x0B	; 11
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	e7 e8       	ldi	r30, 0x87	; 135
 50a:	f2 e0       	ldi	r31, 0x02	; 2
 50c:	99 c2       	rjmp	.+1330   	; 0xa40 <__prologue_saves__>
 50e:	6c 01       	movw	r12, r24
 510:	7b 01       	movw	r14, r22
 512:	8a 01       	movw	r16, r20
 514:	fc 01       	movw	r30, r24
 516:	17 82       	std	Z+7, r1	; 0x07
 518:	16 82       	std	Z+6, r1	; 0x06
 51a:	83 81       	ldd	r24, Z+3	; 0x03
 51c:	81 ff       	sbrs	r24, 1
 51e:	c0 c1       	rjmp	.+896    	; 0x8a0 <vfprintf+0x39c>
 520:	ce 01       	movw	r24, r28
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	3c 01       	movw	r6, r24
 526:	f6 01       	movw	r30, r12
 528:	93 81       	ldd	r25, Z+3	; 0x03
 52a:	f7 01       	movw	r30, r14
 52c:	93 fd       	sbrc	r25, 3
 52e:	85 91       	lpm	r24, Z+
 530:	93 ff       	sbrs	r25, 3
 532:	81 91       	ld	r24, Z+
 534:	7f 01       	movw	r14, r30
 536:	88 23       	and	r24, r24
 538:	09 f4       	brne	.+2      	; 0x53c <vfprintf+0x38>
 53a:	ae c1       	rjmp	.+860    	; 0x898 <vfprintf+0x394>
 53c:	85 32       	cpi	r24, 0x25	; 37
 53e:	39 f4       	brne	.+14     	; 0x54e <vfprintf+0x4a>
 540:	93 fd       	sbrc	r25, 3
 542:	85 91       	lpm	r24, Z+
 544:	93 ff       	sbrs	r25, 3
 546:	81 91       	ld	r24, Z+
 548:	7f 01       	movw	r14, r30
 54a:	85 32       	cpi	r24, 0x25	; 37
 54c:	21 f4       	brne	.+8      	; 0x556 <vfprintf+0x52>
 54e:	b6 01       	movw	r22, r12
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	d1 d1       	rcall	.+930    	; 0x8f6 <fputc>
 554:	e8 cf       	rjmp	.-48     	; 0x526 <vfprintf+0x22>
 556:	91 2c       	mov	r9, r1
 558:	21 2c       	mov	r2, r1
 55a:	31 2c       	mov	r3, r1
 55c:	ff e1       	ldi	r31, 0x1F	; 31
 55e:	f3 15       	cp	r31, r3
 560:	e0 f0       	brcs	.+56     	; 0x59a <vfprintf+0x96>
 562:	8b 32       	cpi	r24, 0x2B	; 43
 564:	79 f0       	breq	.+30     	; 0x584 <vfprintf+0x80>
 566:	38 f4       	brcc	.+14     	; 0x576 <vfprintf+0x72>
 568:	80 32       	cpi	r24, 0x20	; 32
 56a:	79 f0       	breq	.+30     	; 0x58a <vfprintf+0x86>
 56c:	83 32       	cpi	r24, 0x23	; 35
 56e:	a9 f4       	brne	.+42     	; 0x59a <vfprintf+0x96>
 570:	23 2d       	mov	r18, r3
 572:	20 61       	ori	r18, 0x10	; 16
 574:	10 c0       	rjmp	.+32     	; 0x596 <vfprintf+0x92>
 576:	8d 32       	cpi	r24, 0x2D	; 45
 578:	59 f0       	breq	.+22     	; 0x590 <vfprintf+0x8c>
 57a:	80 33       	cpi	r24, 0x30	; 48
 57c:	71 f4       	brne	.+28     	; 0x59a <vfprintf+0x96>
 57e:	23 2d       	mov	r18, r3
 580:	21 60       	ori	r18, 0x01	; 1
 582:	09 c0       	rjmp	.+18     	; 0x596 <vfprintf+0x92>
 584:	83 2d       	mov	r24, r3
 586:	82 60       	ori	r24, 0x02	; 2
 588:	38 2e       	mov	r3, r24
 58a:	e3 2d       	mov	r30, r3
 58c:	e4 60       	ori	r30, 0x04	; 4
 58e:	22 c0       	rjmp	.+68     	; 0x5d4 <vfprintf+0xd0>
 590:	f3 2d       	mov	r31, r3
 592:	f8 60       	ori	r31, 0x08	; 8
 594:	25 c0       	rjmp	.+74     	; 0x5e0 <vfprintf+0xdc>
 596:	32 2e       	mov	r3, r18
 598:	27 c0       	rjmp	.+78     	; 0x5e8 <vfprintf+0xe4>
 59a:	37 fc       	sbrc	r3, 7
 59c:	2d c0       	rjmp	.+90     	; 0x5f8 <vfprintf+0xf4>
 59e:	20 ed       	ldi	r18, 0xD0	; 208
 5a0:	28 0f       	add	r18, r24
 5a2:	2a 30       	cpi	r18, 0x0A	; 10
 5a4:	88 f4       	brcc	.+34     	; 0x5c8 <vfprintf+0xc4>
 5a6:	36 fe       	sbrs	r3, 6
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <vfprintf+0xb2>
 5aa:	89 2d       	mov	r24, r9
 5ac:	6a e0       	ldi	r22, 0x0A	; 10
 5ae:	3f d2       	rcall	.+1150   	; 0xa2e <__mulqi3>
 5b0:	92 2e       	mov	r9, r18
 5b2:	98 0e       	add	r9, r24
 5b4:	19 c0       	rjmp	.+50     	; 0x5e8 <vfprintf+0xe4>
 5b6:	82 2d       	mov	r24, r2
 5b8:	6a e0       	ldi	r22, 0x0A	; 10
 5ba:	39 d2       	rcall	.+1138   	; 0xa2e <__mulqi3>
 5bc:	22 2e       	mov	r2, r18
 5be:	28 0e       	add	r2, r24
 5c0:	83 2d       	mov	r24, r3
 5c2:	80 62       	ori	r24, 0x20	; 32
 5c4:	38 2e       	mov	r3, r24
 5c6:	10 c0       	rjmp	.+32     	; 0x5e8 <vfprintf+0xe4>
 5c8:	8e 32       	cpi	r24, 0x2E	; 46
 5ca:	31 f4       	brne	.+12     	; 0x5d8 <vfprintf+0xd4>
 5cc:	36 fc       	sbrc	r3, 6
 5ce:	64 c1       	rjmp	.+712    	; 0x898 <vfprintf+0x394>
 5d0:	e3 2d       	mov	r30, r3
 5d2:	e0 64       	ori	r30, 0x40	; 64
 5d4:	3e 2e       	mov	r3, r30
 5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <vfprintf+0xe4>
 5d8:	8c 36       	cpi	r24, 0x6C	; 108
 5da:	21 f4       	brne	.+8      	; 0x5e4 <vfprintf+0xe0>
 5dc:	f3 2d       	mov	r31, r3
 5de:	f0 68       	ori	r31, 0x80	; 128
 5e0:	3f 2e       	mov	r3, r31
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <vfprintf+0xe4>
 5e4:	88 36       	cpi	r24, 0x68	; 104
 5e6:	41 f4       	brne	.+16     	; 0x5f8 <vfprintf+0xf4>
 5e8:	f7 01       	movw	r30, r14
 5ea:	93 fd       	sbrc	r25, 3
 5ec:	85 91       	lpm	r24, Z+
 5ee:	93 ff       	sbrs	r25, 3
 5f0:	81 91       	ld	r24, Z+
 5f2:	7f 01       	movw	r14, r30
 5f4:	81 11       	cpse	r24, r1
 5f6:	b2 cf       	rjmp	.-156    	; 0x55c <vfprintf+0x58>
 5f8:	98 2f       	mov	r25, r24
 5fa:	9f 7d       	andi	r25, 0xDF	; 223
 5fc:	95 54       	subi	r25, 0x45	; 69
 5fe:	93 30       	cpi	r25, 0x03	; 3
 600:	28 f4       	brcc	.+10     	; 0x60c <vfprintf+0x108>
 602:	0c 5f       	subi	r16, 0xFC	; 252
 604:	1f 4f       	sbci	r17, 0xFF	; 255
 606:	2f e3       	ldi	r18, 0x3F	; 63
 608:	29 83       	std	Y+1, r18	; 0x01
 60a:	0d c0       	rjmp	.+26     	; 0x626 <vfprintf+0x122>
 60c:	83 36       	cpi	r24, 0x63	; 99
 60e:	31 f0       	breq	.+12     	; 0x61c <vfprintf+0x118>
 610:	83 37       	cpi	r24, 0x73	; 115
 612:	71 f0       	breq	.+28     	; 0x630 <vfprintf+0x12c>
 614:	83 35       	cpi	r24, 0x53	; 83
 616:	09 f0       	breq	.+2      	; 0x61a <vfprintf+0x116>
 618:	55 c0       	rjmp	.+170    	; 0x6c4 <vfprintf+0x1c0>
 61a:	20 c0       	rjmp	.+64     	; 0x65c <vfprintf+0x158>
 61c:	f8 01       	movw	r30, r16
 61e:	80 81       	ld	r24, Z
 620:	89 83       	std	Y+1, r24	; 0x01
 622:	0e 5f       	subi	r16, 0xFE	; 254
 624:	1f 4f       	sbci	r17, 0xFF	; 255
 626:	88 24       	eor	r8, r8
 628:	83 94       	inc	r8
 62a:	91 2c       	mov	r9, r1
 62c:	53 01       	movw	r10, r6
 62e:	12 c0       	rjmp	.+36     	; 0x654 <vfprintf+0x150>
 630:	28 01       	movw	r4, r16
 632:	f2 e0       	ldi	r31, 0x02	; 2
 634:	4f 0e       	add	r4, r31
 636:	51 1c       	adc	r5, r1
 638:	f8 01       	movw	r30, r16
 63a:	a0 80       	ld	r10, Z
 63c:	b1 80       	ldd	r11, Z+1	; 0x01
 63e:	36 fe       	sbrs	r3, 6
 640:	03 c0       	rjmp	.+6      	; 0x648 <vfprintf+0x144>
 642:	69 2d       	mov	r22, r9
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <vfprintf+0x148>
 648:	6f ef       	ldi	r22, 0xFF	; 255
 64a:	7f ef       	ldi	r23, 0xFF	; 255
 64c:	c5 01       	movw	r24, r10
 64e:	38 d1       	rcall	.+624    	; 0x8c0 <strnlen>
 650:	4c 01       	movw	r8, r24
 652:	82 01       	movw	r16, r4
 654:	f3 2d       	mov	r31, r3
 656:	ff 77       	andi	r31, 0x7F	; 127
 658:	3f 2e       	mov	r3, r31
 65a:	15 c0       	rjmp	.+42     	; 0x686 <vfprintf+0x182>
 65c:	28 01       	movw	r4, r16
 65e:	22 e0       	ldi	r18, 0x02	; 2
 660:	42 0e       	add	r4, r18
 662:	51 1c       	adc	r5, r1
 664:	f8 01       	movw	r30, r16
 666:	a0 80       	ld	r10, Z
 668:	b1 80       	ldd	r11, Z+1	; 0x01
 66a:	36 fe       	sbrs	r3, 6
 66c:	03 c0       	rjmp	.+6      	; 0x674 <vfprintf+0x170>
 66e:	69 2d       	mov	r22, r9
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <vfprintf+0x174>
 674:	6f ef       	ldi	r22, 0xFF	; 255
 676:	7f ef       	ldi	r23, 0xFF	; 255
 678:	c5 01       	movw	r24, r10
 67a:	17 d1       	rcall	.+558    	; 0x8aa <strnlen_P>
 67c:	4c 01       	movw	r8, r24
 67e:	f3 2d       	mov	r31, r3
 680:	f0 68       	ori	r31, 0x80	; 128
 682:	3f 2e       	mov	r3, r31
 684:	82 01       	movw	r16, r4
 686:	33 fc       	sbrc	r3, 3
 688:	19 c0       	rjmp	.+50     	; 0x6bc <vfprintf+0x1b8>
 68a:	82 2d       	mov	r24, r2
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	88 16       	cp	r8, r24
 690:	99 06       	cpc	r9, r25
 692:	a0 f4       	brcc	.+40     	; 0x6bc <vfprintf+0x1b8>
 694:	b6 01       	movw	r22, r12
 696:	80 e2       	ldi	r24, 0x20	; 32
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	2d d1       	rcall	.+602    	; 0x8f6 <fputc>
 69c:	2a 94       	dec	r2
 69e:	f5 cf       	rjmp	.-22     	; 0x68a <vfprintf+0x186>
 6a0:	f5 01       	movw	r30, r10
 6a2:	37 fc       	sbrc	r3, 7
 6a4:	85 91       	lpm	r24, Z+
 6a6:	37 fe       	sbrs	r3, 7
 6a8:	81 91       	ld	r24, Z+
 6aa:	5f 01       	movw	r10, r30
 6ac:	b6 01       	movw	r22, r12
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	22 d1       	rcall	.+580    	; 0x8f6 <fputc>
 6b2:	21 10       	cpse	r2, r1
 6b4:	2a 94       	dec	r2
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	82 1a       	sub	r8, r18
 6ba:	91 08       	sbc	r9, r1
 6bc:	81 14       	cp	r8, r1
 6be:	91 04       	cpc	r9, r1
 6c0:	79 f7       	brne	.-34     	; 0x6a0 <vfprintf+0x19c>
 6c2:	e1 c0       	rjmp	.+450    	; 0x886 <vfprintf+0x382>
 6c4:	84 36       	cpi	r24, 0x64	; 100
 6c6:	11 f0       	breq	.+4      	; 0x6cc <vfprintf+0x1c8>
 6c8:	89 36       	cpi	r24, 0x69	; 105
 6ca:	39 f5       	brne	.+78     	; 0x71a <vfprintf+0x216>
 6cc:	f8 01       	movw	r30, r16
 6ce:	37 fe       	sbrs	r3, 7
 6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <vfprintf+0x1dc>
 6d2:	60 81       	ld	r22, Z
 6d4:	71 81       	ldd	r23, Z+1	; 0x01
 6d6:	82 81       	ldd	r24, Z+2	; 0x02
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	0c 5f       	subi	r16, 0xFC	; 252
 6dc:	1f 4f       	sbci	r17, 0xFF	; 255
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <vfprintf+0x1ec>
 6e0:	60 81       	ld	r22, Z
 6e2:	71 81       	ldd	r23, Z+1	; 0x01
 6e4:	07 2e       	mov	r0, r23
 6e6:	00 0c       	add	r0, r0
 6e8:	88 0b       	sbc	r24, r24
 6ea:	99 0b       	sbc	r25, r25
 6ec:	0e 5f       	subi	r16, 0xFE	; 254
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	f3 2d       	mov	r31, r3
 6f2:	ff 76       	andi	r31, 0x6F	; 111
 6f4:	3f 2e       	mov	r3, r31
 6f6:	97 ff       	sbrs	r25, 7
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <vfprintf+0x208>
 6fa:	90 95       	com	r25
 6fc:	80 95       	com	r24
 6fe:	70 95       	com	r23
 700:	61 95       	neg	r22
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	f0 68       	ori	r31, 0x80	; 128
 70a:	3f 2e       	mov	r3, r31
 70c:	2a e0       	ldi	r18, 0x0A	; 10
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	a3 01       	movw	r20, r6
 712:	2d d1       	rcall	.+602    	; 0x96e <__ultoa_invert>
 714:	88 2e       	mov	r8, r24
 716:	86 18       	sub	r8, r6
 718:	44 c0       	rjmp	.+136    	; 0x7a2 <vfprintf+0x29e>
 71a:	85 37       	cpi	r24, 0x75	; 117
 71c:	31 f4       	brne	.+12     	; 0x72a <vfprintf+0x226>
 71e:	23 2d       	mov	r18, r3
 720:	2f 7e       	andi	r18, 0xEF	; 239
 722:	b2 2e       	mov	r11, r18
 724:	2a e0       	ldi	r18, 0x0A	; 10
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	25 c0       	rjmp	.+74     	; 0x774 <vfprintf+0x270>
 72a:	93 2d       	mov	r25, r3
 72c:	99 7f       	andi	r25, 0xF9	; 249
 72e:	b9 2e       	mov	r11, r25
 730:	8f 36       	cpi	r24, 0x6F	; 111
 732:	c1 f0       	breq	.+48     	; 0x764 <vfprintf+0x260>
 734:	18 f4       	brcc	.+6      	; 0x73c <vfprintf+0x238>
 736:	88 35       	cpi	r24, 0x58	; 88
 738:	79 f0       	breq	.+30     	; 0x758 <vfprintf+0x254>
 73a:	ae c0       	rjmp	.+348    	; 0x898 <vfprintf+0x394>
 73c:	80 37       	cpi	r24, 0x70	; 112
 73e:	19 f0       	breq	.+6      	; 0x746 <vfprintf+0x242>
 740:	88 37       	cpi	r24, 0x78	; 120
 742:	21 f0       	breq	.+8      	; 0x74c <vfprintf+0x248>
 744:	a9 c0       	rjmp	.+338    	; 0x898 <vfprintf+0x394>
 746:	e9 2f       	mov	r30, r25
 748:	e0 61       	ori	r30, 0x10	; 16
 74a:	be 2e       	mov	r11, r30
 74c:	b4 fe       	sbrs	r11, 4
 74e:	0d c0       	rjmp	.+26     	; 0x76a <vfprintf+0x266>
 750:	fb 2d       	mov	r31, r11
 752:	f4 60       	ori	r31, 0x04	; 4
 754:	bf 2e       	mov	r11, r31
 756:	09 c0       	rjmp	.+18     	; 0x76a <vfprintf+0x266>
 758:	34 fe       	sbrs	r3, 4
 75a:	0a c0       	rjmp	.+20     	; 0x770 <vfprintf+0x26c>
 75c:	29 2f       	mov	r18, r25
 75e:	26 60       	ori	r18, 0x06	; 6
 760:	b2 2e       	mov	r11, r18
 762:	06 c0       	rjmp	.+12     	; 0x770 <vfprintf+0x26c>
 764:	28 e0       	ldi	r18, 0x08	; 8
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	05 c0       	rjmp	.+10     	; 0x774 <vfprintf+0x270>
 76a:	20 e1       	ldi	r18, 0x10	; 16
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x270>
 770:	20 e1       	ldi	r18, 0x10	; 16
 772:	32 e0       	ldi	r19, 0x02	; 2
 774:	f8 01       	movw	r30, r16
 776:	b7 fe       	sbrs	r11, 7
 778:	07 c0       	rjmp	.+14     	; 0x788 <vfprintf+0x284>
 77a:	60 81       	ld	r22, Z
 77c:	71 81       	ldd	r23, Z+1	; 0x01
 77e:	82 81       	ldd	r24, Z+2	; 0x02
 780:	93 81       	ldd	r25, Z+3	; 0x03
 782:	0c 5f       	subi	r16, 0xFC	; 252
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	06 c0       	rjmp	.+12     	; 0x794 <vfprintf+0x290>
 788:	60 81       	ld	r22, Z
 78a:	71 81       	ldd	r23, Z+1	; 0x01
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 5f       	subi	r16, 0xFE	; 254
 792:	1f 4f       	sbci	r17, 0xFF	; 255
 794:	a3 01       	movw	r20, r6
 796:	eb d0       	rcall	.+470    	; 0x96e <__ultoa_invert>
 798:	88 2e       	mov	r8, r24
 79a:	86 18       	sub	r8, r6
 79c:	fb 2d       	mov	r31, r11
 79e:	ff 77       	andi	r31, 0x7F	; 127
 7a0:	3f 2e       	mov	r3, r31
 7a2:	36 fe       	sbrs	r3, 6
 7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <vfprintf+0x2bc>
 7a6:	23 2d       	mov	r18, r3
 7a8:	2e 7f       	andi	r18, 0xFE	; 254
 7aa:	a2 2e       	mov	r10, r18
 7ac:	89 14       	cp	r8, r9
 7ae:	58 f4       	brcc	.+22     	; 0x7c6 <vfprintf+0x2c2>
 7b0:	34 fe       	sbrs	r3, 4
 7b2:	0b c0       	rjmp	.+22     	; 0x7ca <vfprintf+0x2c6>
 7b4:	32 fc       	sbrc	r3, 2
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <vfprintf+0x2c6>
 7b8:	83 2d       	mov	r24, r3
 7ba:	8e 7e       	andi	r24, 0xEE	; 238
 7bc:	a8 2e       	mov	r10, r24
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <vfprintf+0x2c6>
 7c0:	b8 2c       	mov	r11, r8
 7c2:	a3 2c       	mov	r10, r3
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x2c8>
 7c6:	b8 2c       	mov	r11, r8
 7c8:	01 c0       	rjmp	.+2      	; 0x7cc <vfprintf+0x2c8>
 7ca:	b9 2c       	mov	r11, r9
 7cc:	a4 fe       	sbrs	r10, 4
 7ce:	0f c0       	rjmp	.+30     	; 0x7ee <vfprintf+0x2ea>
 7d0:	fe 01       	movw	r30, r28
 7d2:	e8 0d       	add	r30, r8
 7d4:	f1 1d       	adc	r31, r1
 7d6:	80 81       	ld	r24, Z
 7d8:	80 33       	cpi	r24, 0x30	; 48
 7da:	21 f4       	brne	.+8      	; 0x7e4 <vfprintf+0x2e0>
 7dc:	9a 2d       	mov	r25, r10
 7de:	99 7e       	andi	r25, 0xE9	; 233
 7e0:	a9 2e       	mov	r10, r25
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <vfprintf+0x2f2>
 7e4:	a2 fe       	sbrs	r10, 2
 7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <vfprintf+0x2f0>
 7e8:	b3 94       	inc	r11
 7ea:	b3 94       	inc	r11
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <vfprintf+0x2f2>
 7ee:	8a 2d       	mov	r24, r10
 7f0:	86 78       	andi	r24, 0x86	; 134
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <vfprintf+0x2f2>
 7f4:	b3 94       	inc	r11
 7f6:	a3 fc       	sbrc	r10, 3
 7f8:	10 c0       	rjmp	.+32     	; 0x81a <vfprintf+0x316>
 7fa:	a0 fe       	sbrs	r10, 0
 7fc:	06 c0       	rjmp	.+12     	; 0x80a <vfprintf+0x306>
 7fe:	b2 14       	cp	r11, r2
 800:	80 f4       	brcc	.+32     	; 0x822 <vfprintf+0x31e>
 802:	28 0c       	add	r2, r8
 804:	92 2c       	mov	r9, r2
 806:	9b 18       	sub	r9, r11
 808:	0d c0       	rjmp	.+26     	; 0x824 <vfprintf+0x320>
 80a:	b2 14       	cp	r11, r2
 80c:	58 f4       	brcc	.+22     	; 0x824 <vfprintf+0x320>
 80e:	b6 01       	movw	r22, r12
 810:	80 e2       	ldi	r24, 0x20	; 32
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	70 d0       	rcall	.+224    	; 0x8f6 <fputc>
 816:	b3 94       	inc	r11
 818:	f8 cf       	rjmp	.-16     	; 0x80a <vfprintf+0x306>
 81a:	b2 14       	cp	r11, r2
 81c:	18 f4       	brcc	.+6      	; 0x824 <vfprintf+0x320>
 81e:	2b 18       	sub	r2, r11
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x322>
 822:	98 2c       	mov	r9, r8
 824:	21 2c       	mov	r2, r1
 826:	a4 fe       	sbrs	r10, 4
 828:	0f c0       	rjmp	.+30     	; 0x848 <vfprintf+0x344>
 82a:	b6 01       	movw	r22, r12
 82c:	80 e3       	ldi	r24, 0x30	; 48
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	62 d0       	rcall	.+196    	; 0x8f6 <fputc>
 832:	a2 fe       	sbrs	r10, 2
 834:	16 c0       	rjmp	.+44     	; 0x862 <vfprintf+0x35e>
 836:	a1 fc       	sbrc	r10, 1
 838:	03 c0       	rjmp	.+6      	; 0x840 <vfprintf+0x33c>
 83a:	88 e7       	ldi	r24, 0x78	; 120
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0x340>
 840:	88 e5       	ldi	r24, 0x58	; 88
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	b6 01       	movw	r22, r12
 846:	0c c0       	rjmp	.+24     	; 0x860 <vfprintf+0x35c>
 848:	8a 2d       	mov	r24, r10
 84a:	86 78       	andi	r24, 0x86	; 134
 84c:	51 f0       	breq	.+20     	; 0x862 <vfprintf+0x35e>
 84e:	a1 fe       	sbrs	r10, 1
 850:	02 c0       	rjmp	.+4      	; 0x856 <vfprintf+0x352>
 852:	8b e2       	ldi	r24, 0x2B	; 43
 854:	01 c0       	rjmp	.+2      	; 0x858 <vfprintf+0x354>
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	a7 fc       	sbrc	r10, 7
 85a:	8d e2       	ldi	r24, 0x2D	; 45
 85c:	b6 01       	movw	r22, r12
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	4a d0       	rcall	.+148    	; 0x8f6 <fputc>
 862:	89 14       	cp	r8, r9
 864:	30 f4       	brcc	.+12     	; 0x872 <vfprintf+0x36e>
 866:	b6 01       	movw	r22, r12
 868:	80 e3       	ldi	r24, 0x30	; 48
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	44 d0       	rcall	.+136    	; 0x8f6 <fputc>
 86e:	9a 94       	dec	r9
 870:	f8 cf       	rjmp	.-16     	; 0x862 <vfprintf+0x35e>
 872:	8a 94       	dec	r8
 874:	f3 01       	movw	r30, r6
 876:	e8 0d       	add	r30, r8
 878:	f1 1d       	adc	r31, r1
 87a:	80 81       	ld	r24, Z
 87c:	b6 01       	movw	r22, r12
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	3a d0       	rcall	.+116    	; 0x8f6 <fputc>
 882:	81 10       	cpse	r8, r1
 884:	f6 cf       	rjmp	.-20     	; 0x872 <vfprintf+0x36e>
 886:	22 20       	and	r2, r2
 888:	09 f4       	brne	.+2      	; 0x88c <vfprintf+0x388>
 88a:	4d ce       	rjmp	.-870    	; 0x526 <vfprintf+0x22>
 88c:	b6 01       	movw	r22, r12
 88e:	80 e2       	ldi	r24, 0x20	; 32
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	31 d0       	rcall	.+98     	; 0x8f6 <fputc>
 894:	2a 94       	dec	r2
 896:	f7 cf       	rjmp	.-18     	; 0x886 <vfprintf+0x382>
 898:	f6 01       	movw	r30, r12
 89a:	86 81       	ldd	r24, Z+6	; 0x06
 89c:	97 81       	ldd	r25, Z+7	; 0x07
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <vfprintf+0x3a0>
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	9f ef       	ldi	r25, 0xFF	; 255
 8a4:	2b 96       	adiw	r28, 0x0b	; 11
 8a6:	e2 e1       	ldi	r30, 0x12	; 18
 8a8:	e2 c0       	rjmp	.+452    	; 0xa6e <__epilogue_restores__>

000008aa <strnlen_P>:
 8aa:	fc 01       	movw	r30, r24
 8ac:	05 90       	lpm	r0, Z+
 8ae:	61 50       	subi	r22, 0x01	; 1
 8b0:	70 40       	sbci	r23, 0x00	; 0
 8b2:	01 10       	cpse	r0, r1
 8b4:	d8 f7       	brcc	.-10     	; 0x8ac <strnlen_P+0x2>
 8b6:	80 95       	com	r24
 8b8:	90 95       	com	r25
 8ba:	8e 0f       	add	r24, r30
 8bc:	9f 1f       	adc	r25, r31
 8be:	08 95       	ret

000008c0 <strnlen>:
 8c0:	fc 01       	movw	r30, r24
 8c2:	61 50       	subi	r22, 0x01	; 1
 8c4:	70 40       	sbci	r23, 0x00	; 0
 8c6:	01 90       	ld	r0, Z+
 8c8:	01 10       	cpse	r0, r1
 8ca:	d8 f7       	brcc	.-10     	; 0x8c2 <strnlen+0x2>
 8cc:	80 95       	com	r24
 8ce:	90 95       	com	r25
 8d0:	8e 0f       	add	r24, r30
 8d2:	9f 1f       	adc	r25, r31
 8d4:	08 95       	ret

000008d6 <strrev>:
 8d6:	dc 01       	movw	r26, r24
 8d8:	fc 01       	movw	r30, r24
 8da:	67 2f       	mov	r22, r23
 8dc:	71 91       	ld	r23, Z+
 8de:	77 23       	and	r23, r23
 8e0:	e1 f7       	brne	.-8      	; 0x8da <strrev+0x4>
 8e2:	32 97       	sbiw	r30, 0x02	; 2
 8e4:	04 c0       	rjmp	.+8      	; 0x8ee <strrev+0x18>
 8e6:	7c 91       	ld	r23, X
 8e8:	6d 93       	st	X+, r22
 8ea:	70 83       	st	Z, r23
 8ec:	62 91       	ld	r22, -Z
 8ee:	ae 17       	cp	r26, r30
 8f0:	bf 07       	cpc	r27, r31
 8f2:	c8 f3       	brcs	.-14     	; 0x8e6 <strrev+0x10>
 8f4:	08 95       	ret

000008f6 <fputc>:
 8f6:	0f 93       	push	r16
 8f8:	1f 93       	push	r17
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	fb 01       	movw	r30, r22
 900:	23 81       	ldd	r18, Z+3	; 0x03
 902:	21 fd       	sbrc	r18, 1
 904:	03 c0       	rjmp	.+6      	; 0x90c <fputc+0x16>
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	2c c0       	rjmp	.+88     	; 0x964 <fputc+0x6e>
 90c:	22 ff       	sbrs	r18, 2
 90e:	16 c0       	rjmp	.+44     	; 0x93c <fputc+0x46>
 910:	46 81       	ldd	r20, Z+6	; 0x06
 912:	57 81       	ldd	r21, Z+7	; 0x07
 914:	24 81       	ldd	r18, Z+4	; 0x04
 916:	35 81       	ldd	r19, Z+5	; 0x05
 918:	42 17       	cp	r20, r18
 91a:	53 07       	cpc	r21, r19
 91c:	44 f4       	brge	.+16     	; 0x92e <fputc+0x38>
 91e:	a0 81       	ld	r26, Z
 920:	b1 81       	ldd	r27, Z+1	; 0x01
 922:	9d 01       	movw	r18, r26
 924:	2f 5f       	subi	r18, 0xFF	; 255
 926:	3f 4f       	sbci	r19, 0xFF	; 255
 928:	31 83       	std	Z+1, r19	; 0x01
 92a:	20 83       	st	Z, r18
 92c:	8c 93       	st	X, r24
 92e:	26 81       	ldd	r18, Z+6	; 0x06
 930:	37 81       	ldd	r19, Z+7	; 0x07
 932:	2f 5f       	subi	r18, 0xFF	; 255
 934:	3f 4f       	sbci	r19, 0xFF	; 255
 936:	37 83       	std	Z+7, r19	; 0x07
 938:	26 83       	std	Z+6, r18	; 0x06
 93a:	14 c0       	rjmp	.+40     	; 0x964 <fputc+0x6e>
 93c:	8b 01       	movw	r16, r22
 93e:	ec 01       	movw	r28, r24
 940:	fb 01       	movw	r30, r22
 942:	00 84       	ldd	r0, Z+8	; 0x08
 944:	f1 85       	ldd	r31, Z+9	; 0x09
 946:	e0 2d       	mov	r30, r0
 948:	09 95       	icall
 94a:	89 2b       	or	r24, r25
 94c:	e1 f6       	brne	.-72     	; 0x906 <fputc+0x10>
 94e:	d8 01       	movw	r26, r16
 950:	16 96       	adiw	r26, 0x06	; 6
 952:	8d 91       	ld	r24, X+
 954:	9c 91       	ld	r25, X
 956:	17 97       	sbiw	r26, 0x07	; 7
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	17 96       	adiw	r26, 0x07	; 7
 95c:	9c 93       	st	X, r25
 95e:	8e 93       	st	-X, r24
 960:	16 97       	sbiw	r26, 0x06	; 6
 962:	ce 01       	movw	r24, r28
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	0f 91       	pop	r16
 96c:	08 95       	ret

0000096e <__ultoa_invert>:
 96e:	fa 01       	movw	r30, r20
 970:	aa 27       	eor	r26, r26
 972:	28 30       	cpi	r18, 0x08	; 8
 974:	61 f1       	breq	.+88     	; 0x9ce <__ultoa_invert+0x60>
 976:	20 31       	cpi	r18, 0x10	; 16
 978:	91 f1       	breq	.+100    	; 0x9de <__ultoa_invert+0x70>
 97a:	e8 94       	clt
 97c:	6f 93       	push	r22
 97e:	6e 7f       	andi	r22, 0xFE	; 254
 980:	6e 5f       	subi	r22, 0xFE	; 254
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	af 4f       	sbci	r26, 0xFF	; 255
 98a:	b1 e0       	ldi	r27, 0x01	; 1
 98c:	40 d0       	rcall	.+128    	; 0xa0e <__ultoa_invert+0xa0>
 98e:	b4 e0       	ldi	r27, 0x04	; 4
 990:	3e d0       	rcall	.+124    	; 0xa0e <__ultoa_invert+0xa0>
 992:	67 0f       	add	r22, r23
 994:	78 1f       	adc	r23, r24
 996:	89 1f       	adc	r24, r25
 998:	9a 1f       	adc	r25, r26
 99a:	a1 1d       	adc	r26, r1
 99c:	68 0f       	add	r22, r24
 99e:	79 1f       	adc	r23, r25
 9a0:	8a 1f       	adc	r24, r26
 9a2:	91 1d       	adc	r25, r1
 9a4:	a1 1d       	adc	r26, r1
 9a6:	6a 0f       	add	r22, r26
 9a8:	71 1d       	adc	r23, r1
 9aa:	81 1d       	adc	r24, r1
 9ac:	91 1d       	adc	r25, r1
 9ae:	a1 1d       	adc	r26, r1
 9b0:	22 d0       	rcall	.+68     	; 0x9f6 <__ultoa_invert+0x88>
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <__ultoa_invert+0x48>
 9b4:	68 94       	set
 9b6:	3f 91       	pop	r19
 9b8:	06 2e       	mov	r0, r22
 9ba:	00 0c       	add	r0, r0
 9bc:	30 19       	sub	r19, r0
 9be:	00 0c       	add	r0, r0
 9c0:	00 0c       	add	r0, r0
 9c2:	30 19       	sub	r19, r0
 9c4:	30 5d       	subi	r19, 0xD0	; 208
 9c6:	31 93       	st	Z+, r19
 9c8:	ce f6       	brtc	.-78     	; 0x97c <__ultoa_invert+0xe>
 9ca:	cf 01       	movw	r24, r30
 9cc:	08 95       	ret
 9ce:	46 2f       	mov	r20, r22
 9d0:	47 70       	andi	r20, 0x07	; 7
 9d2:	40 5d       	subi	r20, 0xD0	; 208
 9d4:	41 93       	st	Z+, r20
 9d6:	b3 e0       	ldi	r27, 0x03	; 3
 9d8:	0f d0       	rcall	.+30     	; 0x9f8 <__ultoa_invert+0x8a>
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__ultoa_invert+0x60>
 9dc:	f6 cf       	rjmp	.-20     	; 0x9ca <__ultoa_invert+0x5c>
 9de:	46 2f       	mov	r20, r22
 9e0:	4f 70       	andi	r20, 0x0F	; 15
 9e2:	40 5d       	subi	r20, 0xD0	; 208
 9e4:	4a 33       	cpi	r20, 0x3A	; 58
 9e6:	18 f0       	brcs	.+6      	; 0x9ee <__ultoa_invert+0x80>
 9e8:	49 5d       	subi	r20, 0xD9	; 217
 9ea:	31 fd       	sbrc	r19, 1
 9ec:	40 52       	subi	r20, 0x20	; 32
 9ee:	41 93       	st	Z+, r20
 9f0:	02 d0       	rcall	.+4      	; 0x9f6 <__ultoa_invert+0x88>
 9f2:	a9 f7       	brne	.-22     	; 0x9de <__ultoa_invert+0x70>
 9f4:	ea cf       	rjmp	.-44     	; 0x9ca <__ultoa_invert+0x5c>
 9f6:	b4 e0       	ldi	r27, 0x04	; 4
 9f8:	a6 95       	lsr	r26
 9fa:	97 95       	ror	r25
 9fc:	87 95       	ror	r24
 9fe:	77 95       	ror	r23
 a00:	67 95       	ror	r22
 a02:	ba 95       	dec	r27
 a04:	c9 f7       	brne	.-14     	; 0x9f8 <__ultoa_invert+0x8a>
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	61 05       	cpc	r22, r1
 a0a:	71 05       	cpc	r23, r1
 a0c:	08 95       	ret
 a0e:	9b 01       	movw	r18, r22
 a10:	ac 01       	movw	r20, r24
 a12:	0a 2e       	mov	r0, r26
 a14:	06 94       	lsr	r0
 a16:	57 95       	ror	r21
 a18:	47 95       	ror	r20
 a1a:	37 95       	ror	r19
 a1c:	27 95       	ror	r18
 a1e:	ba 95       	dec	r27
 a20:	c9 f7       	brne	.-14     	; 0xa14 <__ultoa_invert+0xa6>
 a22:	62 0f       	add	r22, r18
 a24:	73 1f       	adc	r23, r19
 a26:	84 1f       	adc	r24, r20
 a28:	95 1f       	adc	r25, r21
 a2a:	a0 1d       	adc	r26, r0
 a2c:	08 95       	ret

00000a2e <__mulqi3>:
 a2e:	00 24       	eor	r0, r0

00000a30 <__mulqi3_loop>:
 a30:	80 fd       	sbrc	r24, 0
 a32:	06 0e       	add	r0, r22
 a34:	66 0f       	add	r22, r22
 a36:	11 f0       	breq	.+4      	; 0xa3c <__mulqi3_exit>
 a38:	86 95       	lsr	r24
 a3a:	d1 f7       	brne	.-12     	; 0xa30 <__mulqi3_loop>

00000a3c <__mulqi3_exit>:
 a3c:	80 2d       	mov	r24, r0
 a3e:	08 95       	ret

00000a40 <__prologue_saves__>:
 a40:	2f 92       	push	r2
 a42:	3f 92       	push	r3
 a44:	4f 92       	push	r4
 a46:	5f 92       	push	r5
 a48:	6f 92       	push	r6
 a4a:	7f 92       	push	r7
 a4c:	8f 92       	push	r8
 a4e:	9f 92       	push	r9
 a50:	af 92       	push	r10
 a52:	bf 92       	push	r11
 a54:	cf 92       	push	r12
 a56:	df 92       	push	r13
 a58:	ef 92       	push	r14
 a5a:	ff 92       	push	r15
 a5c:	0f 93       	push	r16
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	ca 1b       	sub	r28, r26
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	dd 27       	eor	r29, r29
 a6c:	09 94       	ijmp

00000a6e <__epilogue_restores__>:
 a6e:	2a 88       	ldd	r2, Y+18	; 0x12
 a70:	39 88       	ldd	r3, Y+17	; 0x11
 a72:	48 88       	ldd	r4, Y+16	; 0x10
 a74:	5f 84       	ldd	r5, Y+15	; 0x0f
 a76:	6e 84       	ldd	r6, Y+14	; 0x0e
 a78:	7d 84       	ldd	r7, Y+13	; 0x0d
 a7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 a80:	b9 84       	ldd	r11, Y+9	; 0x09
 a82:	c8 84       	ldd	r12, Y+8	; 0x08
 a84:	df 80       	ldd	r13, Y+7	; 0x07
 a86:	ee 80       	ldd	r14, Y+6	; 0x06
 a88:	fd 80       	ldd	r15, Y+5	; 0x05
 a8a:	0c 81       	ldd	r16, Y+4	; 0x04
 a8c:	1b 81       	ldd	r17, Y+3	; 0x03
 a8e:	aa 81       	ldd	r26, Y+2	; 0x02
 a90:	d9 81       	ldd	r29, Y+1	; 0x01
 a92:	ce 0f       	add	r28, r30
 a94:	cd bf       	out	0x3d, r28	; 61
 a96:	ca 2f       	mov	r28, r26
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
