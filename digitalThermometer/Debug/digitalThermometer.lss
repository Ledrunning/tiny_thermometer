
digitalThermometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080008a  0080008a  00000692  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000208d  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000903  00000000  00000000  000028a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb0  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00003d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013bb  00000000  00000000  000045d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ed       	ldi	r30, 0xD4	; 212
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 38       	cpi	r26, 0x8A	; 138
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e8       	ldi	r26, 0x8A	; 138
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 39       	cpi	r26, 0x94	; 148
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f1 d1       	rcall	.+994    	; 0x43c <main>
  5a:	ba c2       	rjmp	.+1396   	; 0x5d0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcdSendNibble>:
    while (lcdIsBusy());

    lcdRawSendByte((0b00011000 | dir), LCD_COMMAND);
    pos--;
  }
}
  5e:	97 b3       	in	r25, 0x17	; 23
  60:	97 60       	ori	r25, 0x07	; 7
  62:	97 bb       	out	0x17, r25	; 23
  64:	97 b3       	in	r25, 0x17	; 23
  66:	98 67       	ori	r25, 0x78	; 120
  68:	97 bb       	out	0x17, r25	; 23
  6a:	c1 98       	cbi	0x18, 1	; 24
  6c:	66 23       	and	r22, r22
  6e:	11 f0       	breq	.+4      	; 0x74 <lcdSendNibble+0x16>
  70:	c0 9a       	sbi	0x18, 0	; 24
  72:	01 c0       	rjmp	.+2      	; 0x76 <lcdSendNibble+0x18>
  74:	c0 98       	cbi	0x18, 0	; 24
  76:	c2 9a       	sbi	0x18, 2	; 24
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	97 78       	andi	r25, 0x87	; 135
  7c:	98 bb       	out	0x18, r25	; 24
  7e:	83 fd       	sbrc	r24, 3
  80:	c6 9a       	sbi	0x18, 6	; 24
  82:	82 fd       	sbrc	r24, 2
  84:	c5 9a       	sbi	0x18, 5	; 24
  86:	81 fd       	sbrc	r24, 1
  88:	c4 9a       	sbi	0x18, 4	; 24
  8a:	80 fd       	sbrc	r24, 0
  8c:	c3 9a       	sbi	0x18, 3	; 24
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <lcdSendNibble+0x32>
  94:	00 00       	nop
  96:	c2 98       	cbi	0x18, 2	; 24
  98:	08 95       	ret

0000009a <lcdRawSendByte>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c8 2f       	mov	r28, r24
  a0:	d6 2f       	mov	r29, r22
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	db df       	rcall	.-74     	; 0x5e <lcdSendNibble>
  a8:	6d 2f       	mov	r22, r29
  aa:	8c 2f       	mov	r24, r28
  ac:	d8 df       	rcall	.-80     	; 0x5e <lcdSendNibble>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <lcdInit>:
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcdInit+0x4>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcdInit+0xa>
  be:	00 00       	nop
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	cc df       	rcall	.-104    	; 0x5e <lcdSendNibble>
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcdInit+0x16>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcdInit+0x1c>
  d0:	00 00       	nop
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	e1 df       	rcall	.-62     	; 0x9a <lcdRawSendByte>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdInit+0x28>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	d8 df       	rcall	.-80     	; 0x9a <lcdRawSendByte>
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__stack+0xf>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__stack+0x15>
  f4:	00 00       	nop
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	cf df       	rcall	.-98     	; 0x9a <lcdRawSendByte>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__stack+0x21>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__stack+0x27>
 106:	00 00       	nop
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	c6 df       	rcall	.-116    	; 0x9a <lcdRawSendByte>
 10e:	08 95       	ret

00000110 <lcdSetCursor>:
 110:	ef ec       	ldi	r30, 0xCF	; 207
 112:	f7 e0       	ldi	r31, 0x07	; 7
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdSetCursor+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcdSetCursor+0xa>
 11a:	00 00       	nop
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8c 60       	ori	r24, 0x0C	; 12
 120:	bc df       	rcall	.-136    	; 0x9a <lcdRawSendByte>
 122:	08 95       	ret

00000124 <lcdSetDisplay>:
 124:	ef ec       	ldi	r30, 0xCF	; 207
 126:	f7 e0       	ldi	r31, 0x07	; 7
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdSetDisplay+0x4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdSetDisplay+0xa>
 12e:	00 00       	nop
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	88 60       	ori	r24, 0x08	; 8
 134:	b2 df       	rcall	.-156    	; 0x9a <lcdRawSendByte>
 136:	08 95       	ret

00000138 <lcdClear>:
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdClear+0x4>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdClear+0xa>
 142:	00 00       	nop
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	a8 df       	rcall	.-176    	; 0x9a <lcdRawSendByte>
 14a:	08 95       	ret

0000014c <lcdGotoXY>:
 14c:	ef ec       	ldi	r30, 0xCF	; 207
 14e:	f7 e0       	ldi	r31, 0x07	; 7
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcdGotoXY+0x4>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcdGotoXY+0xa>
 156:	00 00       	nop
 158:	82 95       	swap	r24
 15a:	88 0f       	add	r24, r24
 15c:	88 0f       	add	r24, r24
 15e:	80 7c       	andi	r24, 0xC0	; 192
 160:	86 0f       	add	r24, r22
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 68       	ori	r24, 0x80	; 128
 166:	99 df       	rcall	.-206    	; 0x9a <lcdRawSendByte>
 168:	08 95       	ret

0000016a <lcdPuts>:

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
  while (*str) {
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z
 172:	22 23       	and	r18, r18
 174:	69 f0       	breq	.+26     	; 0x190 <lcdPuts+0x26>
 176:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcdPuts+0x12>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcdPuts+0x18>
 182:	00 00       	nop
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 91       	ld	r24, Y+
 188:	88 df       	rcall	.-240    	; 0x9a <lcdRawSendByte>

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
  while (*str) {
 18a:	88 81       	ld	r24, Y
 18c:	81 11       	cpse	r24, r1
 18e:	f4 cf       	rjmp	.-24     	; 0x178 <lcdPuts+0xe>
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
  }
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <print_humidity>:
		_delay_ms(1000);
	}
}

void print_humidity(char* buffer)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	if(humidityResult < 100)
 19c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <humidityResult>
 1a0:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <humidityResult+0x1>
 1a4:	84 36       	cpi	r24, 0x64	; 100
 1a6:	91 05       	cpc	r25, r1
 1a8:	d0 f4       	brcc	.+52     	; 0x1de <print_humidity+0x48>
	{
	lcdGotoXY(0,0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	ce df       	rcall	.-100    	; 0x14c <lcdGotoXY>
	lcdPuts("H= ");
 1b0:	80 e6       	ldi	r24, 0x60	; 96
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	da df       	rcall	.-76     	; 0x16a <lcdPuts>
	lcdGotoXY(0,3);
 1b6:	63 e0       	ldi	r22, 0x03	; 3
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	c8 df       	rcall	.-112    	; 0x14c <lcdGotoXY>
	itoa(humidityResult, buffer, DOZEN);
 1bc:	4a e0       	ldi	r20, 0x0A	; 10
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	be 01       	movw	r22, r28
 1c2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <humidityResult>
 1c6:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <humidityResult+0x1>
 1ca:	c5 d1       	rcall	.+906    	; 0x556 <itoa>
	lcdPuts(buffer);
 1cc:	ce 01       	movw	r24, r28
 1ce:	cd df       	rcall	.-102    	; 0x16a <lcdPuts>
	lcdGotoXY(0, 5);
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	bb df       	rcall	.-138    	; 0x14c <lcdGotoXY>
	lcdPuts("%");	
 1d6:	84 e6       	ldi	r24, 0x64	; 100
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	c7 df       	rcall	.-114    	; 0x16a <lcdPuts>
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <print_humidity+0x7a>
	}
	else
	{
		lcdGotoXY(0,0);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	b4 df       	rcall	.-152    	; 0x14c <lcdGotoXY>
		lcdPuts("H=");
 1e4:	86 e6       	ldi	r24, 0x66	; 102
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	c0 df       	rcall	.-128    	; 0x16a <lcdPuts>
		lcdGotoXY(0,2);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	ae df       	rcall	.-164    	; 0x14c <lcdGotoXY>
		itoa(humidityResult, buffer, DOZEN);
 1f0:	4a e0       	ldi	r20, 0x0A	; 10
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	be 01       	movw	r22, r28
 1f6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <humidityResult>
 1fa:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <humidityResult+0x1>
 1fe:	ab d1       	rcall	.+854    	; 0x556 <itoa>
		lcdPuts(buffer);
 200:	ce 01       	movw	r24, r28
 202:	b3 df       	rcall	.-154    	; 0x16a <lcdPuts>
		lcdGotoXY(0, 5);
 204:	65 e0       	ldi	r22, 0x05	; 5
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	a1 df       	rcall	.-190    	; 0x14c <lcdGotoXY>
		lcdPuts("%");
 20a:	84 e6       	ldi	r24, 0x64	; 100
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	ad df       	rcall	.-166    	; 0x16a <lcdPuts>
	}
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <request>:
	
}

void request()                /* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT22_PIN);
 216:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT22_PIN);    /* set to low pin */
 218:	96 98       	cbi	0x12, 6	; 18
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9c e9       	ldi	r25, 0x9C	; 156
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <request+0x8>
 222:	00 c0       	rjmp	.+0      	; 0x224 <request+0xe>
 224:	00 00       	nop
	_delay_ms(20);            /* wait for 20ms */
	PORTD |= (1<<DHT22_PIN);	/* set to high pin */
 226:	96 9a       	sbi	0x12, 6	; 18
 228:	08 95       	ret

0000022a <response>:
}

void response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT22_PIN);
 22a:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT22_PIN));
 22c:	86 99       	sbic	0x10, 6	; 16
 22e:	fe cf       	rjmp	.-4      	; 0x22c <response+0x2>
	while((PIND & (1<<DHT22_PIN))==0);
 230:	86 9b       	sbis	0x10, 6	; 16
 232:	fe cf       	rjmp	.-4      	; 0x230 <response+0x6>
	while(PIND & (1<<DHT22_PIN));
 234:	86 99       	sbic	0x10, 6	; 16
 236:	fe cf       	rjmp	.-4      	; 0x234 <response+0xa>
}
 238:	08 95       	ret

0000023a <receive_data>:

uint8_t receive_data()			/* receive data */
{
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	90 e0       	ldi	r25, 0x00	; 0
	int q;
	for (q=0; q<8; q++)
	{
		while((PIND & (1<<DHT22_PIN)) == 0);  /* check received bit 0 or 1 */
 23e:	86 9b       	sbis	0x10, 6	; 16
 240:	fe cf       	rjmp	.-4      	; 0x23e <receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	20 e5       	ldi	r18, 0x50	; 80
 244:	2a 95       	dec	r18
 246:	f1 f7       	brne	.-4      	; 0x244 <receive_data+0xa>
		_delay_us(30);
		if(PIND & (1<<DHT22_PIN))/* if high pulse is greater than 30ms */
 248:	86 9b       	sbis	0x10, 6	; 16
 24a:	07 c0       	rjmp	.+14     	; 0x25a <receive_data+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 24c:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__data_end>
 250:	22 0f       	add	r18, r18
 252:	21 60       	ori	r18, 0x01	; 1
 254:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__data_end>
 258:	05 c0       	rjmp	.+10     	; 0x264 <receive_data+0x2a>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 25a:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__data_end>
 25e:	22 0f       	add	r18, r18
 260:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__data_end>
		while(PIND & (1<<DHT22_PIN));
 264:	86 99       	sbic	0x10, 6	; 16
 266:	fe cf       	rjmp	.-4      	; 0x264 <receive_data+0x2a>
 268:	01 97       	sbiw	r24, 0x01	; 1
}

uint8_t receive_data()			/* receive data */
{
	int q;
	for (q=0; q<8; q++)
 26a:	49 f7       	brne	.-46     	; 0x23e <receive_data+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT22_PIN));
	}
	return c;
}
 26c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 270:	08 95       	ret

00000272 <get_checksum>:

int get_checksum(){
	
	return lowByteRh + highByteRh + lowByteTemp + highByteTemp;
 272:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <lowByteRh>
 276:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <highByteRh>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	82 0f       	add	r24, r18
 27e:	91 1d       	adc	r25, r1
 280:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <lowByteTemp>
 284:	82 0f       	add	r24, r18
 286:	91 1d       	adc	r25, r1
 288:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <highByteTemp>
}
 28c:	82 0f       	add	r24, r18
 28e:	91 1d       	adc	r25, r1
 290:	08 95       	ret

00000292 <print_error>:

void print_error()
{
lcdGotoXY(0,0);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	5a df       	rcall	.-332    	; 0x14c <lcdGotoXY>
lcdPuts("Sens    ");
 298:	89 e6       	ldi	r24, 0x69	; 105
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	66 df       	rcall	.-308    	; 0x16a <lcdPuts>
lcdGotoXY(1,0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	54 df       	rcall	.-344    	; 0x14c <lcdGotoXY>
lcdPuts("Err     ");	
 2a4:	82 e7       	ldi	r24, 0x72	; 114
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	60 df       	rcall	.-320    	; 0x16a <lcdPuts>
 2aa:	08 95       	ret

000002ac <print_negative_temperature>:
		lcdGotoXY(0, 5);
		lcdPuts("%");
	}
}

void print_negative_temperature(char* buffer, int negativeTemp){
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	8c 01       	movw	r16, r24
 2b6:	9b 01       	movw	r18, r22

	uint16_t negativeData = negativeTemp/DEC;
 2b8:	cb 01       	movw	r24, r22
 2ba:	6a e0       	ldi	r22, 0x0A	; 10
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	38 d1       	rcall	.+624    	; 0x530 <__divmodhi4>
 2c0:	eb 01       	movw	r28, r22
	
	if((abs(negativeTemp) != abs(MINIMUM_TEMP)))
 2c2:	c9 01       	movw	r24, r18
 2c4:	99 23       	and	r25, r25
 2c6:	24 f4       	brge	.+8      	; 0x2d0 <print_negative_temperature+0x24>
 2c8:	88 27       	eor	r24, r24
 2ca:	99 27       	eor	r25, r25
 2cc:	82 1b       	sub	r24, r18
 2ce:	93 0b       	sbc	r25, r19
 2d0:	88 97       	sbiw	r24, 0x28	; 40
 2d2:	e9 f1       	breq	.+122    	; 0x34e <print_negative_temperature+0xa2>
	{
		if(abs(negativeData) < abs(NEGATIVE_POINT))
 2d4:	ce 01       	movw	r24, r28
 2d6:	dd 23       	and	r29, r29
 2d8:	24 f4       	brge	.+8      	; 0x2e2 <print_negative_temperature+0x36>
 2da:	88 27       	eor	r24, r24
 2dc:	99 27       	eor	r25, r25
 2de:	8c 1b       	sub	r24, r28
 2e0:	9d 0b       	sbc	r25, r29
 2e2:	0a 97       	sbiw	r24, 0x0a	; 10
 2e4:	ec f4       	brge	.+58     	; 0x320 <print_negative_temperature+0x74>
		{
			lcdGotoXY(1,0);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	30 df       	rcall	.-416    	; 0x14c <lcdGotoXY>
			lcdPuts("T= ");
 2ec:	8b e7       	ldi	r24, 0x7B	; 123
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	3c df       	rcall	.-392    	; 0x16a <lcdPuts>
			lcdGotoXY(1,3);
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	2a df       	rcall	.-428    	; 0x14c <lcdGotoXY>
			itoa(negativeData, buffer, DEC);
 2f8:	4a e0       	ldi	r20, 0x0A	; 10
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	b8 01       	movw	r22, r16
 2fe:	ce 01       	movw	r24, r28
 300:	2a d1       	rcall	.+596    	; 0x556 <itoa>
			lcdPuts(buffer);
 302:	c8 01       	movw	r24, r16
 304:	32 df       	rcall	.-412    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 306:	65 e0       	ldi	r22, 0x05	; 5
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	20 df       	rcall	.-448    	; 0x14c <lcdGotoXY>
			lcdPuts(" ");
 30c:	89 e7       	ldi	r24, 0x79	; 121
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	2c df       	rcall	.-424    	; 0x16a <lcdPuts>
			lcdGotoXY(1,6);
 312:	66 e0       	ldi	r22, 0x06	; 6
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	1a df       	rcall	.-460    	; 0x14c <lcdGotoXY>
			lcdPuts("C ");
 318:	8f e7       	ldi	r24, 0x7F	; 127
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	26 df       	rcall	.-436    	; 0x16a <lcdPuts>
 31e:	18 c0       	rjmp	.+48     	; 0x350 <print_negative_temperature+0xa4>
		}
		else{
			lcdGotoXY(1,0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	13 df       	rcall	.-474    	; 0x14c <lcdGotoXY>
			lcdPuts("T=");
 326:	82 e8       	ldi	r24, 0x82	; 130
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	1f df       	rcall	.-450    	; 0x16a <lcdPuts>
			lcdGotoXY(1,2);
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0d df       	rcall	.-486    	; 0x14c <lcdGotoXY>
			itoa(negativeData, buffer, DEC);
 332:	4a e0       	ldi	r20, 0x0A	; 10
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	b8 01       	movw	r22, r16
 338:	ce 01       	movw	r24, r28
 33a:	0d d1       	rcall	.+538    	; 0x556 <itoa>
			lcdPuts(buffer);
 33c:	c8 01       	movw	r24, r16
 33e:	15 df       	rcall	.-470    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 340:	65 e0       	ldi	r22, 0x05	; 5
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	03 df       	rcall	.-506    	; 0x14c <lcdGotoXY>
			lcdPuts("C ");
 346:	8f e7       	ldi	r24, 0x7F	; 127
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0f df       	rcall	.-482    	; 0x16a <lcdPuts>
 34c:	01 c0       	rjmp	.+2      	; 0x350 <print_negative_temperature+0xa4>
		}
	}
	else
	{
		print_error();
 34e:	a1 df       	rcall	.-190    	; 0x292 <print_error>
	}
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <print_temperature>:

void print_temperature(char* buffer, uint16_t temp_after_point)
{
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	ec 01       	movw	r28, r24
 368:	7b 01       	movw	r14, r22
	uint16_t temperatureData = temperatureResult / DOZEN;
 36a:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <temperatureResult>
 36e:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <temperatureResult+0x1>
 372:	6a e0       	ldi	r22, 0x0A	; 10
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	c8 d0       	rcall	.+400    	; 0x508 <__udivmodhi4>
 378:	06 2f       	mov	r16, r22
 37a:	17 2f       	mov	r17, r23
 37c:	86 2f       	mov	r24, r22
 37e:	97 2f       	mov	r25, r23
	
	if(temperatureData != MAXIMUM_TEMP) 
 380:	80 35       	cpi	r24, 0x50	; 80
 382:	91 05       	cpc	r25, r1
 384:	09 f4       	brne	.+2      	; 0x388 <print_temperature+0x2e>
 386:	52 c0       	rjmp	.+164    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		
		if(temperatureData < DEC)
 388:	0a 97       	sbiw	r24, 0x0a	; 10
 38a:	40 f5       	brcc	.+80     	; 0x3dc <print_temperature+0x82>
		{
			lcdGotoXY(1,0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	dd de       	rcall	.-582    	; 0x14c <lcdGotoXY>
			lcdPuts("T= ");
 392:	8b e7       	ldi	r24, 0x7B	; 123
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	e9 de       	rcall	.-558    	; 0x16a <lcdPuts>
			lcdGotoXY(1,3);
 398:	63 e0       	ldi	r22, 0x03	; 3
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	d7 de       	rcall	.-594    	; 0x14c <lcdGotoXY>
			itoa(temperatureData, buffer, DEC);
 39e:	4a e0       	ldi	r20, 0x0A	; 10
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	be 01       	movw	r22, r28
 3a4:	80 2f       	mov	r24, r16
 3a6:	91 2f       	mov	r25, r17
 3a8:	d6 d0       	rcall	.+428    	; 0x556 <itoa>
			lcdPuts(buffer);
 3aa:	ce 01       	movw	r24, r28
 3ac:	de de       	rcall	.-580    	; 0x16a <lcdPuts>
			lcdGotoXY(1,4);
 3ae:	64 e0       	ldi	r22, 0x04	; 4
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	cc de       	rcall	.-616    	; 0x14c <lcdGotoXY>
			lcdPuts(".");
 3b4:	85 e8       	ldi	r24, 0x85	; 133
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	d8 de       	rcall	.-592    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 3ba:	65 e0       	ldi	r22, 0x05	; 5
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	c6 de       	rcall	.-628    	; 0x14c <lcdGotoXY>
			itoa(temp_after_point, buffer, DEC);
 3c0:	4a e0       	ldi	r20, 0x0A	; 10
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	be 01       	movw	r22, r28
 3c6:	c7 01       	movw	r24, r14
 3c8:	c6 d0       	rcall	.+396    	; 0x556 <itoa>
			lcdPuts(buffer);
 3ca:	ce 01       	movw	r24, r28
 3cc:	ce de       	rcall	.-612    	; 0x16a <lcdPuts>
			lcdGotoXY(1,6);
 3ce:	66 e0       	ldi	r22, 0x06	; 6
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	bc de       	rcall	.-648    	; 0x14c <lcdGotoXY>
			lcdPuts("C");
 3d4:	87 e8       	ldi	r24, 0x87	; 135
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	c8 de       	rcall	.-624    	; 0x16a <lcdPuts>
 3da:	29 c0       	rjmp	.+82     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		}
		else
		{
			lcdGotoXY(1,0);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	b5 de       	rcall	.-662    	; 0x14c <lcdGotoXY>
			lcdPuts("T=");
 3e2:	82 e8       	ldi	r24, 0x82	; 130
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	c1 de       	rcall	.-638    	; 0x16a <lcdPuts>
			lcdGotoXY(1,2);
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	af de       	rcall	.-674    	; 0x14c <lcdGotoXY>
			itoa(temperatureData, buffer, DEC);
 3ee:	4a e0       	ldi	r20, 0x0A	; 10
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	be 01       	movw	r22, r28
 3f4:	80 2f       	mov	r24, r16
 3f6:	91 2f       	mov	r25, r17
 3f8:	ae d0       	rcall	.+348    	; 0x556 <itoa>
			lcdPuts(buffer);
 3fa:	ce 01       	movw	r24, r28
 3fc:	b6 de       	rcall	.-660    	; 0x16a <lcdPuts>
			lcdGotoXY(1,4);
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	a4 de       	rcall	.-696    	; 0x14c <lcdGotoXY>
			lcdPuts(".");
 404:	85 e8       	ldi	r24, 0x85	; 133
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	b0 de       	rcall	.-672    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 40a:	65 e0       	ldi	r22, 0x05	; 5
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	9e de       	rcall	.-708    	; 0x14c <lcdGotoXY>
			itoa(temp_after_point, buffer, DEC);
 410:	4a e0       	ldi	r20, 0x0A	; 10
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	be 01       	movw	r22, r28
 416:	c7 01       	movw	r24, r14
 418:	9e d0       	rcall	.+316    	; 0x556 <itoa>
			lcdPuts(buffer);
 41a:	ce 01       	movw	r24, r28
 41c:	a6 de       	rcall	.-692    	; 0x16a <lcdPuts>
			lcdGotoXY(1,6);
 41e:	66 e0       	ldi	r22, 0x06	; 6
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	94 de       	rcall	.-728    	; 0x14c <lcdGotoXY>
			lcdPuts("C");
 424:	87 e8       	ldi	r24, 0x87	; 135
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	a0 de       	rcall	.-704    	; 0x16a <lcdPuts>
 42a:	01 c0       	rjmp	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		}
	}
	else
	{
		print_error();
 42c:	32 df       	rcall	.-412    	; 0x292 <print_error>
	}
	
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	08 95       	ret

0000043c <main>:
void response();				/* receive response from DHT11 */
uint8_t receive_data();			/* receive data */
int get_checksum();
void print_error();

int main(void) {
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	dd 27       	eor	r29, r29
 444:	c6 50       	subi	r28, 0x06	; 6
 446:	cd bf       	out	0x3d, r28	; 61
	char tBuffer[STRING_SIZE], hBuffer[STRING_SIZE];
	uint16_t temp_buffer;
	uint16_t temp_buffer_after_point;
	int negativeTemp;

	lcdInit();
 448:	35 de       	rcall	.-918    	; 0xb4 <lcdInit>
	lcdClear();
 44a:	76 de       	rcall	.-788    	; 0x138 <lcdClear>
	lcdSetDisplay(LCD_DISPLAY_ON);
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	6a de       	rcall	.-812    	; 0x124 <lcdSetDisplay>
	lcdSetCursor(LCD_CURSOR_OFF);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	5e de       	rcall	.-836    	; 0x110 <lcdSetCursor>
		{
			print_error();
		}
		else
		{
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 454:	0f 2e       	mov	r0, r31
 456:	fa e0       	ldi	r31, 0x0A	; 10
 458:	ef 2e       	mov	r14, r31
 45a:	f1 2c       	mov	r15, r1
 45c:	f0 2d       	mov	r31, r0
	lcdSetDisplay(LCD_DISPLAY_ON);
	lcdSetCursor(LCD_CURSOR_OFF);
	
	while (1) {

		request();		/* send start pulse */
 45e:	db de       	rcall	.-586    	; 0x216 <request>
		response();		/* receive response */
 460:	e4 de       	rcall	.-568    	; 0x22a <response>
		[1] RH decimal
		[2] Temp integral
		[3] Temp decimal
		[4] checksum is the sum of all four bytes AND 255
		*/
		lowByteRh=receive_data();	/* store first eight bit in I_RH */
 462:	eb de       	rcall	.-554    	; 0x23a <receive_data>
 464:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <lowByteRh>
		highByteRh=receive_data();	/* store next eight bit in D_RH */
 468:	e8 de       	rcall	.-560    	; 0x23a <receive_data>
 46a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <highByteRh>
		lowByteTemp=receive_data();	/* store next eight bit in I_Temp */
 46e:	e5 de       	rcall	.-566    	; 0x23a <receive_data>
 470:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <lowByteTemp>
		highByteTemp=receive_data();	/* store next eight bit in D_Temp */
 474:	e2 de       	rcall	.-572    	; 0x23a <receive_data>
 476:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <highByteTemp>
		checkSum=receive_data();/* store next eight bit in CheckSum */
 47a:	df de       	rcall	.-578    	; 0x23a <receive_data>
 47c:	18 2f       	mov	r17, r24
 47e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <checkSum>
		
		/* (DHTdata[0] + DHTdata[1] + DHTdata[2] + DHTdata[3]) & 255) will = DHTdata[4] IF the checksum is good. */
		if ((get_checksum() & 255) != checkSum)
 482:	f7 de       	rcall	.-530    	; 0x272 <get_checksum>
 484:	99 27       	eor	r25, r25
 486:	21 2f       	mov	r18, r17
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	82 17       	cp	r24, r18
 48c:	93 07       	cpc	r25, r19
 48e:	11 f0       	breq	.+4      	; 0x494 <main+0x58>
		{
			print_error();
 490:	00 df       	rcall	.-512    	; 0x292 <print_error>
 492:	30 c0       	rjmp	.+96     	; 0x4f4 <main+0xb8>
		}
		else
		{
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 494:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <lowByteRh>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	98 2f       	mov	r25, r24
 49c:	88 27       	eor	r24, r24
 49e:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <highByteRh>
 4a2:	82 0f       	add	r24, r18
 4a4:	91 1d       	adc	r25, r1
 4a6:	b7 01       	movw	r22, r14
 4a8:	43 d0       	rcall	.+134    	; 0x530 <__divmodhi4>
 4aa:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <humidityResult+0x1>
 4ae:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <humidityResult>
			print_humidity(hBuffer);
 4b2:	ce 01       	movw	r24, r28
 4b4:	04 96       	adiw	r24, 0x04	; 4
 4b6:	6f de       	rcall	.-802    	; 0x196 <print_humidity>
			temperatureResult = (lowByteTemp * 256 + highByteTemp );
 4b8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <lowByteTemp>
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	98 2f       	mov	r25, r24
 4c0:	88 27       	eor	r24, r24
 4c2:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <highByteTemp>
 4c6:	82 0f       	add	r24, r18
 4c8:	91 1d       	adc	r25, r1
 4ca:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <temperatureResult+0x1>
 4ce:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <temperatureResult>
			
			if(temperatureResult > TEMP_MASK)
 4d2:	99 23       	and	r25, r25
 4d4:	4c f4       	brge	.+18     	; 0x4e8 <main+0xac>
			{
				negativeTemp = -(TEMP_MASK & temperatureResult); /* shoud be devide by DOZEN */
				print_negative_temperature(tBuffer, negativeTemp);
 4d6:	9f 77       	andi	r25, 0x7F	; 127
 4d8:	66 27       	eor	r22, r22
 4da:	77 27       	eor	r23, r23
 4dc:	68 1b       	sub	r22, r24
 4de:	79 0b       	sbc	r23, r25
 4e0:	ce 01       	movw	r24, r28
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	e3 de       	rcall	.-570    	; 0x2ac <print_negative_temperature>
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <main+0xb8>
			}
			else
			{
				temp_buffer = temperatureResult;
				temp_buffer_after_point = temp_buffer % DOZEN;
				print_temperature(tBuffer, temp_buffer_after_point);
 4e8:	b7 01       	movw	r22, r14
 4ea:	0e d0       	rcall	.+28     	; 0x508 <__udivmodhi4>
 4ec:	bc 01       	movw	r22, r24
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	33 df       	rcall	.-410    	; 0x35a <print_temperature>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	89 e6       	ldi	r24, 0x69	; 105
 4f8:	98 e1       	ldi	r25, 0x18	; 24
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <main+0xbe>
 502:	00 c0       	rjmp	.+0      	; 0x504 <main+0xc8>
 504:	00 00       	nop
 506:	ab cf       	rjmp	.-170    	; 0x45e <main+0x22>

00000508 <__udivmodhi4>:
 508:	aa 1b       	sub	r26, r26
 50a:	bb 1b       	sub	r27, r27
 50c:	51 e1       	ldi	r21, 0x11	; 17
 50e:	07 c0       	rjmp	.+14     	; 0x51e <__udivmodhi4_ep>

00000510 <__udivmodhi4_loop>:
 510:	aa 1f       	adc	r26, r26
 512:	bb 1f       	adc	r27, r27
 514:	a6 17       	cp	r26, r22
 516:	b7 07       	cpc	r27, r23
 518:	10 f0       	brcs	.+4      	; 0x51e <__udivmodhi4_ep>
 51a:	a6 1b       	sub	r26, r22
 51c:	b7 0b       	sbc	r27, r23

0000051e <__udivmodhi4_ep>:
 51e:	88 1f       	adc	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	5a 95       	dec	r21
 524:	a9 f7       	brne	.-22     	; 0x510 <__udivmodhi4_loop>
 526:	80 95       	com	r24
 528:	90 95       	com	r25
 52a:	bc 01       	movw	r22, r24
 52c:	cd 01       	movw	r24, r26
 52e:	08 95       	ret

00000530 <__divmodhi4>:
 530:	97 fb       	bst	r25, 7
 532:	07 2e       	mov	r0, r23
 534:	16 f4       	brtc	.+4      	; 0x53a <__divmodhi4+0xa>
 536:	00 94       	com	r0
 538:	06 d0       	rcall	.+12     	; 0x546 <__divmodhi4_neg1>
 53a:	77 fd       	sbrc	r23, 7
 53c:	08 d0       	rcall	.+16     	; 0x54e <__divmodhi4_neg2>
 53e:	e4 df       	rcall	.-56     	; 0x508 <__udivmodhi4>
 540:	07 fc       	sbrc	r0, 7
 542:	05 d0       	rcall	.+10     	; 0x54e <__divmodhi4_neg2>
 544:	3e f4       	brtc	.+14     	; 0x554 <__divmodhi4_exit>

00000546 <__divmodhi4_neg1>:
 546:	90 95       	com	r25
 548:	81 95       	neg	r24
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	08 95       	ret

0000054e <__divmodhi4_neg2>:
 54e:	70 95       	com	r23
 550:	61 95       	neg	r22
 552:	7f 4f       	sbci	r23, 0xFF	; 255

00000554 <__divmodhi4_exit>:
 554:	08 95       	ret

00000556 <itoa>:
 556:	45 32       	cpi	r20, 0x25	; 37
 558:	51 05       	cpc	r21, r1
 55a:	18 f4       	brcc	.+6      	; 0x562 <itoa+0xc>
 55c:	42 30       	cpi	r20, 0x02	; 2
 55e:	08 f0       	brcs	.+2      	; 0x562 <itoa+0xc>
 560:	04 c0       	rjmp	.+8      	; 0x56a <__itoa_ncheck>
 562:	fb 01       	movw	r30, r22
 564:	10 82       	st	Z, r1
 566:	cb 01       	movw	r24, r22
 568:	08 95       	ret

0000056a <__itoa_ncheck>:
 56a:	bb 27       	eor	r27, r27
 56c:	4a 30       	cpi	r20, 0x0A	; 10
 56e:	31 f4       	brne	.+12     	; 0x57c <__itoa_ncheck+0x12>
 570:	99 23       	and	r25, r25
 572:	22 f4       	brpl	.+8      	; 0x57c <__itoa_ncheck+0x12>
 574:	bd e2       	ldi	r27, 0x2D	; 45
 576:	90 95       	com	r25
 578:	81 95       	neg	r24
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	01 c0       	rjmp	.+2      	; 0x580 <__utoa_common>

0000057e <__utoa_ncheck>:
 57e:	bb 27       	eor	r27, r27

00000580 <__utoa_common>:
 580:	fb 01       	movw	r30, r22
 582:	55 27       	eor	r21, r21
 584:	aa 27       	eor	r26, r26
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	aa 1f       	adc	r26, r26
 58c:	a4 17       	cp	r26, r20
 58e:	10 f0       	brcs	.+4      	; 0x594 <__utoa_common+0x14>
 590:	a4 1b       	sub	r26, r20
 592:	83 95       	inc	r24
 594:	50 51       	subi	r21, 0x10	; 16
 596:	b9 f7       	brne	.-18     	; 0x586 <__utoa_common+0x6>
 598:	a0 5d       	subi	r26, 0xD0	; 208
 59a:	aa 33       	cpi	r26, 0x3A	; 58
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__utoa_common+0x20>
 59e:	a9 5d       	subi	r26, 0xD9	; 217
 5a0:	a1 93       	st	Z+, r26
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	79 f7       	brne	.-34     	; 0x584 <__utoa_common+0x4>
 5a6:	b1 11       	cpse	r27, r1
 5a8:	b1 93       	st	Z+, r27
 5aa:	11 92       	st	Z+, r1
 5ac:	cb 01       	movw	r24, r22
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <strrev>

000005b0 <strrev>:
 5b0:	dc 01       	movw	r26, r24
 5b2:	fc 01       	movw	r30, r24
 5b4:	67 2f       	mov	r22, r23
 5b6:	71 91       	ld	r23, Z+
 5b8:	77 23       	and	r23, r23
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <strrev+0x4>
 5bc:	32 97       	sbiw	r30, 0x02	; 2
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <strrev+0x18>
 5c0:	7c 91       	ld	r23, X
 5c2:	6d 93       	st	X+, r22
 5c4:	70 83       	st	Z, r23
 5c6:	62 91       	ld	r22, -Z
 5c8:	ae 17       	cp	r26, r30
 5ca:	bf 07       	cpc	r27, r31
 5cc:	c8 f3       	brcs	.-14     	; 0x5c0 <strrev+0x10>
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
