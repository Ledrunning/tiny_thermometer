
digitalThermometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000406  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000406  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800070  00800070  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a58  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b7  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a12  00000000  00000000  0000291b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00003330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c9  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e0       	ldi	r30, 0x06	; 6
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e7       	ldi	r26, 0x70	; 112
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 37       	cpi	r26, 0x7A	; 122
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	df d0       	rcall	.+446    	; 0x218 <main>
  5a:	d3 c1       	rjmp	.+934    	; 0x402 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcdSendNibble>:
    while (lcdIsBusy());

    lcdRawSendByte((0b00011000 | dir), LCD_COMMAND);
    pos--;
  }
}
  5e:	97 b3       	in	r25, 0x17	; 23
  60:	97 60       	ori	r25, 0x07	; 7
  62:	97 bb       	out	0x17, r25	; 23
  64:	97 b3       	in	r25, 0x17	; 23
  66:	98 67       	ori	r25, 0x78	; 120
  68:	97 bb       	out	0x17, r25	; 23
  6a:	c1 98       	cbi	0x18, 1	; 24
  6c:	66 23       	and	r22, r22
  6e:	11 f0       	breq	.+4      	; 0x74 <lcdSendNibble+0x16>
  70:	c0 9a       	sbi	0x18, 0	; 24
  72:	01 c0       	rjmp	.+2      	; 0x76 <lcdSendNibble+0x18>
  74:	c0 98       	cbi	0x18, 0	; 24
  76:	c2 9a       	sbi	0x18, 2	; 24
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	97 78       	andi	r25, 0x87	; 135
  7c:	98 bb       	out	0x18, r25	; 24
  7e:	83 fd       	sbrc	r24, 3
  80:	c6 9a       	sbi	0x18, 6	; 24
  82:	82 fd       	sbrc	r24, 2
  84:	c5 9a       	sbi	0x18, 5	; 24
  86:	81 fd       	sbrc	r24, 1
  88:	c4 9a       	sbi	0x18, 4	; 24
  8a:	80 fd       	sbrc	r24, 0
  8c:	c3 9a       	sbi	0x18, 3	; 24
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <lcdSendNibble+0x32>
  94:	00 00       	nop
  96:	c2 98       	cbi	0x18, 2	; 24
  98:	08 95       	ret

0000009a <lcdRawSendByte>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c8 2f       	mov	r28, r24
  a0:	d6 2f       	mov	r29, r22
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	db df       	rcall	.-74     	; 0x5e <lcdSendNibble>
  a8:	6d 2f       	mov	r22, r29
  aa:	8c 2f       	mov	r24, r28
  ac:	d8 df       	rcall	.-80     	; 0x5e <lcdSendNibble>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <lcdInit>:
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcdInit+0x4>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcdInit+0xa>
  be:	00 00       	nop
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	cc df       	rcall	.-104    	; 0x5e <lcdSendNibble>
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcdInit+0x16>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcdInit+0x1c>
  d0:	00 00       	nop
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	e1 df       	rcall	.-62     	; 0x9a <lcdRawSendByte>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdInit+0x28>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	d8 df       	rcall	.-80     	; 0x9a <lcdRawSendByte>
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__stack+0xf>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__stack+0x15>
  f4:	00 00       	nop
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	cf df       	rcall	.-98     	; 0x9a <lcdRawSendByte>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__stack+0x21>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__stack+0x27>
 106:	00 00       	nop
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	c6 df       	rcall	.-116    	; 0x9a <lcdRawSendByte>
 10e:	08 95       	ret

00000110 <lcdSetCursor>:
 110:	ef ec       	ldi	r30, 0xCF	; 207
 112:	f7 e0       	ldi	r31, 0x07	; 7
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdSetCursor+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcdSetCursor+0xa>
 11a:	00 00       	nop
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8c 60       	ori	r24, 0x0C	; 12
 120:	bc df       	rcall	.-136    	; 0x9a <lcdRawSendByte>
 122:	08 95       	ret

00000124 <lcdSetDisplay>:
 124:	ef ec       	ldi	r30, 0xCF	; 207
 126:	f7 e0       	ldi	r31, 0x07	; 7
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdSetDisplay+0x4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdSetDisplay+0xa>
 12e:	00 00       	nop
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	88 60       	ori	r24, 0x08	; 8
 134:	b2 df       	rcall	.-156    	; 0x9a <lcdRawSendByte>
 136:	08 95       	ret

00000138 <lcdClear>:
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdClear+0x4>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdClear+0xa>
 142:	00 00       	nop
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	a8 df       	rcall	.-176    	; 0x9a <lcdRawSendByte>
 14a:	08 95       	ret

0000014c <lcdGotoXY>:
 14c:	ef ec       	ldi	r30, 0xCF	; 207
 14e:	f7 e0       	ldi	r31, 0x07	; 7
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcdGotoXY+0x4>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcdGotoXY+0xa>
 156:	00 00       	nop
 158:	82 95       	swap	r24
 15a:	88 0f       	add	r24, r24
 15c:	88 0f       	add	r24, r24
 15e:	80 7c       	andi	r24, 0xC0	; 192
 160:	86 0f       	add	r24, r22
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 68       	ori	r24, 0x80	; 128
 166:	99 df       	rcall	.-206    	; 0x9a <lcdRawSendByte>
 168:	08 95       	ret

0000016a <lcdPuts>:

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
  while (*str) {
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z
 172:	22 23       	and	r18, r18
 174:	69 f0       	breq	.+26     	; 0x190 <lcdPuts+0x26>
 176:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcdPuts+0x12>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcdPuts+0x18>
 182:	00 00       	nop
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 91       	ld	r24, Y+
 188:	88 df       	rcall	.-240    	; 0x9a <lcdRawSendByte>

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
  while (*str) {
 18a:	88 81       	ld	r24, Y
 18c:	81 11       	cpse	r24, r1
 18e:	f4 cf       	rjmp	.-24     	; 0x178 <lcdPuts+0xe>
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
  }
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <request>:
	}
}

void request()                /* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT22_PIN);
 196:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT22_PIN);    /* set to low pin */
 198:	96 98       	cbi	0x12, 6	; 18
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	89 ef       	ldi	r24, 0xF9	; 249
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <request+0xa>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <request+0x14>
 1aa:	00 00       	nop
	_delay_ms(40);            /* wait for 20ms */
	PORTD |= (1<<DHT22_PIN);	/* set to high pin */
 1ac:	96 9a       	sbi	0x12, 6	; 18
 1ae:	08 95       	ret

000001b0 <response>:
}

void response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT22_PIN);
 1b0:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT22_PIN));
 1b2:	86 99       	sbic	0x10, 6	; 16
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <response+0x2>
	while((PIND & (1<<DHT22_PIN))==0);
 1b6:	86 9b       	sbis	0x10, 6	; 16
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <response+0x6>
	while(PIND & (1<<DHT22_PIN));
 1ba:	86 99       	sbic	0x10, 6	; 16
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <response+0xa>
}
 1be:	08 95       	ret

000001c0 <receive_data>:

uint8_t receive_data()			/* receive data */
{
 1c0:	88 e0       	ldi	r24, 0x08	; 8
 1c2:	90 e0       	ldi	r25, 0x00	; 0
	int q;
	for (q=0; q<8; q++)
	{
		while((PIND & (1<<DHT22_PIN)) == 0);  /* check received bit 0 or 1 */
 1c4:	86 9b       	sbis	0x10, 6	; 16
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	20 e5       	ldi	r18, 0x50	; 80
 1ca:	2a 95       	dec	r18
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <receive_data+0xa>
		_delay_us(30);
		if(PIND & (1<<DHT22_PIN))/* if high pulse is greater than 30ms */
 1ce:	86 9b       	sbis	0x10, 6	; 16
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <receive_data+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 1d2:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__data_end>
 1d6:	22 0f       	add	r18, r18
 1d8:	21 60       	ori	r18, 0x01	; 1
 1da:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__data_end>
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <receive_data+0x2a>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 1e0:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <__data_end>
 1e4:	22 0f       	add	r18, r18
 1e6:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__data_end>
		while(PIND & (1<<DHT22_PIN));
 1ea:	86 99       	sbic	0x10, 6	; 16
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <receive_data+0x2a>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
}

uint8_t receive_data()			/* receive data */
{
	int q;
	for (q=0; q<8; q++)
 1f0:	49 f7       	brne	.-46     	; 0x1c4 <receive_data+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT22_PIN));
	}
	return c;
}
 1f2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1f6:	08 95       	ret

000001f8 <get_checksum>:

int get_checksum(){
	
	return lowByteRh + highByteRh + lowByteTemp + highByteTemp;
 1f8:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <lowByteRh>
 1fc:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <highByteRh>
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	82 0f       	add	r24, r18
 204:	91 1d       	adc	r25, r1
 206:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <lowByteTemp>
 20a:	82 0f       	add	r24, r18
 20c:	91 1d       	adc	r25, r1
 20e:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <highByteTemp>
}
 212:	82 0f       	add	r24, r18
 214:	91 1d       	adc	r25, r1
 216:	08 95       	ret

00000218 <main>:
void request();                /* Microcontroller send start pulse/request */
void response();				/* receive response from DHT11 */
uint8_t receive_data();			/* receive data */
int get_checksum();

int main(void) {
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	dd 27       	eor	r29, r29
 220:	c3 50       	subi	r28, 0x03	; 3
 222:	cd bf       	out	0x3d, r28	; 61
	
	char buffer[3];
	int temp_buffer;
    uint16_t temp_buffer_after_point;

	lcdInit();
 224:	47 df       	rcall	.-370    	; 0xb4 <lcdInit>
	lcdClear();
 226:	88 df       	rcall	.-240    	; 0x138 <lcdClear>
	lcdSetDisplay(LCD_DISPLAY_ON);
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	7c df       	rcall	.-264    	; 0x124 <lcdSetDisplay>
	lcdSetCursor(LCD_CURSOR_OFF);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	70 df       	rcall	.-288    	; 0x110 <lcdSetCursor>
	
	while (1) {

		request();		/* send start pulse */
 230:	b2 df       	rcall	.-156    	; 0x196 <request>
		response();		/* receive response */
 232:	be df       	rcall	.-132    	; 0x1b0 <response>
		lowByteRh=receive_data();	/* store first eight bit in I_RH */
 234:	c5 df       	rcall	.-118    	; 0x1c0 <receive_data>
 236:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <lowByteRh>
		highByteRh=receive_data();	/* store next eight bit in D_RH */
 23a:	c2 df       	rcall	.-124    	; 0x1c0 <receive_data>
 23c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <highByteRh>
		lowByteTemp=receive_data();	/* store next eight bit in I_Temp */
 240:	bf df       	rcall	.-130    	; 0x1c0 <receive_data>
 242:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <lowByteTemp>
		highByteTemp=receive_data();	/* store next eight bit in D_Temp */
 246:	bc df       	rcall	.-136    	; 0x1c0 <receive_data>
 248:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <highByteTemp>
		checkSum=receive_data();/* store next eight bit in CheckSum */
 24c:	b9 df       	rcall	.-142    	; 0x1c0 <receive_data>
 24e:	18 2f       	mov	r17, r24
 250:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <checkSum>
		
		if (get_checksum() != checkSum)
 254:	d1 df       	rcall	.-94     	; 0x1f8 <get_checksum>
 256:	21 2f       	mov	r18, r17
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	82 17       	cp	r24, r18
 25c:	93 07       	cpc	r25, r19
 25e:	39 f0       	breq	.+14     	; 0x26e <main+0x56>
		{
			lcdGotoXY(0,1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	73 df       	rcall	.-282    	; 0x14c <lcdGotoXY>
			lcdPuts("Error");
 266:	80 e6       	ldi	r24, 0x60	; 96
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	7f df       	rcall	.-258    	; 0x16a <lcdPuts>
 26c:	5c c0       	rjmp	.+184    	; 0x326 <main+0x10e>
		}
		else
		{
			lcdClear();
 26e:	64 df       	rcall	.-312    	; 0x138 <lcdClear>
			lcdGotoXY(0,0);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	6b df       	rcall	.-298    	; 0x14c <lcdGotoXY>
			lcdPuts("H=");
 276:	86 e6       	ldi	r24, 0x66	; 102
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	77 df       	rcall	.-274    	; 0x16a <lcdPuts>
			lcdGotoXY(0,3);
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	65 df       	rcall	.-310    	; 0x14c <lcdGotoXY>
			humidityResult = (lowByteRh * 256 + highByteRh );
 282:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <lowByteRh>
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	98 2f       	mov	r25, r24
 28a:	88 27       	eor	r24, r24
 28c:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <highByteRh>
 290:	82 0f       	add	r24, r18
 292:	91 1d       	adc	r25, r1
 294:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <humidityResult+0x1>
 298:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <humidityResult>
			itoa(humidityResult, buffer, 10);
 29c:	4a e0       	ldi	r20, 0x0A	; 10
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	70 d0       	rcall	.+224    	; 0x388 <itoa>
			lcdPuts(buffer);
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	5e df       	rcall	.-324    	; 0x16a <lcdPuts>
			
			lcdGotoXY(1,0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	4c df       	rcall	.-360    	; 0x14c <lcdGotoXY>
			lcdPuts("T=");
 2b4:	89 e6       	ldi	r24, 0x69	; 105
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	58 df       	rcall	.-336    	; 0x16a <lcdPuts>
			lcdGotoXY(1,3);
 2ba:	63 e0       	ldi	r22, 0x03	; 3
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	46 df       	rcall	.-372    	; 0x14c <lcdGotoXY>
			
			temperatureResult = (lowByteTemp * 256 + highByteTemp );
 2c0:	00 91 71 00 	lds	r16, 0x0071	; 0x800071 <lowByteTemp>
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	10 2f       	mov	r17, r16
 2c8:	00 27       	eor	r16, r16
 2ca:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <highByteTemp>
 2ce:	08 0f       	add	r16, r24
 2d0:	11 1d       	adc	r17, r1
 2d2:	10 93 74 00 	sts	0x0074, r17	; 0x800074 <temperatureResult+0x1>
 2d6:	00 93 73 00 	sts	0x0073, r16	; 0x800073 <temperatureResult>
			temp_buffer = temperatureResult;
						
			itoa(temperatureResult, buffer, 10);
 2da:	4a e0       	ldi	r20, 0x0A	; 10
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	be 01       	movw	r22, r28
 2e0:	6f 5f       	subi	r22, 0xFF	; 255
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	c8 01       	movw	r24, r16
 2e6:	50 d0       	rcall	.+160    	; 0x388 <itoa>
			lcdPuts(buffer);
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	3e df       	rcall	.-388    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 2ee:	65 e0       	ldi	r22, 0x05	; 5
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	2c df       	rcall	.-424    	; 0x14c <lcdGotoXY>
			lcdPuts(".");
 2f4:	8c e6       	ldi	r24, 0x6C	; 108
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	38 df       	rcall	.-400    	; 0x16a <lcdPuts>
			lcdGotoXY(1,6);
 2fa:	66 e0       	ldi	r22, 0x06	; 6
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	26 df       	rcall	.-436    	; 0x14c <lcdGotoXY>
			temp_buffer_after_point = temp_buffer % 10;
			itoa(temp_buffer_after_point, buffer, 10);
 300:	c8 01       	movw	r24, r16
 302:	6a e0       	ldi	r22, 0x0A	; 10
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	19 d0       	rcall	.+50     	; 0x33a <__divmodhi4>
 308:	4a e0       	ldi	r20, 0x0A	; 10
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	be 01       	movw	r22, r28
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	3a d0       	rcall	.+116    	; 0x388 <itoa>
			lcdPuts(buffer);
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	28 df       	rcall	.-432    	; 0x16a <lcdPuts>
			lcdGotoXY(1,8);
 31a:	68 e0       	ldi	r22, 0x08	; 8
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	16 df       	rcall	.-468    	; 0x14c <lcdGotoXY>
			lcdPuts("C");
 320:	8e e6       	ldi	r24, 0x6E	; 110
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	22 df       	rcall	.-444    	; 0x16a <lcdPuts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	89 e6       	ldi	r24, 0x69	; 105
 32a:	98 e1       	ldi	r25, 0x18	; 24
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x114>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x11e>
 336:	00 00       	nop
 338:	7b cf       	rjmp	.-266    	; 0x230 <main+0x18>

0000033a <__divmodhi4>:
 33a:	97 fb       	bst	r25, 7
 33c:	07 2e       	mov	r0, r23
 33e:	16 f4       	brtc	.+4      	; 0x344 <__divmodhi4+0xa>
 340:	00 94       	com	r0
 342:	06 d0       	rcall	.+12     	; 0x350 <__divmodhi4_neg1>
 344:	77 fd       	sbrc	r23, 7
 346:	08 d0       	rcall	.+16     	; 0x358 <__divmodhi4_neg2>
 348:	0b d0       	rcall	.+22     	; 0x360 <__udivmodhi4>
 34a:	07 fc       	sbrc	r0, 7
 34c:	05 d0       	rcall	.+10     	; 0x358 <__divmodhi4_neg2>
 34e:	3e f4       	brtc	.+14     	; 0x35e <__divmodhi4_exit>

00000350 <__divmodhi4_neg1>:
 350:	90 95       	com	r25
 352:	81 95       	neg	r24
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	08 95       	ret

00000358 <__divmodhi4_neg2>:
 358:	70 95       	com	r23
 35a:	61 95       	neg	r22
 35c:	7f 4f       	sbci	r23, 0xFF	; 255

0000035e <__divmodhi4_exit>:
 35e:	08 95       	ret

00000360 <__udivmodhi4>:
 360:	aa 1b       	sub	r26, r26
 362:	bb 1b       	sub	r27, r27
 364:	51 e1       	ldi	r21, 0x11	; 17
 366:	07 c0       	rjmp	.+14     	; 0x376 <__udivmodhi4_ep>

00000368 <__udivmodhi4_loop>:
 368:	aa 1f       	adc	r26, r26
 36a:	bb 1f       	adc	r27, r27
 36c:	a6 17       	cp	r26, r22
 36e:	b7 07       	cpc	r27, r23
 370:	10 f0       	brcs	.+4      	; 0x376 <__udivmodhi4_ep>
 372:	a6 1b       	sub	r26, r22
 374:	b7 0b       	sbc	r27, r23

00000376 <__udivmodhi4_ep>:
 376:	88 1f       	adc	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	5a 95       	dec	r21
 37c:	a9 f7       	brne	.-22     	; 0x368 <__udivmodhi4_loop>
 37e:	80 95       	com	r24
 380:	90 95       	com	r25
 382:	bc 01       	movw	r22, r24
 384:	cd 01       	movw	r24, r26
 386:	08 95       	ret

00000388 <itoa>:
 388:	45 32       	cpi	r20, 0x25	; 37
 38a:	51 05       	cpc	r21, r1
 38c:	18 f4       	brcc	.+6      	; 0x394 <itoa+0xc>
 38e:	42 30       	cpi	r20, 0x02	; 2
 390:	08 f0       	brcs	.+2      	; 0x394 <itoa+0xc>
 392:	04 c0       	rjmp	.+8      	; 0x39c <__itoa_ncheck>
 394:	fb 01       	movw	r30, r22
 396:	10 82       	st	Z, r1
 398:	cb 01       	movw	r24, r22
 39a:	08 95       	ret

0000039c <__itoa_ncheck>:
 39c:	bb 27       	eor	r27, r27
 39e:	4a 30       	cpi	r20, 0x0A	; 10
 3a0:	31 f4       	brne	.+12     	; 0x3ae <__itoa_ncheck+0x12>
 3a2:	99 23       	and	r25, r25
 3a4:	22 f4       	brpl	.+8      	; 0x3ae <__itoa_ncheck+0x12>
 3a6:	bd e2       	ldi	r27, 0x2D	; 45
 3a8:	90 95       	com	r25
 3aa:	81 95       	neg	r24
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <__utoa_common>

000003b0 <__utoa_ncheck>:
 3b0:	bb 27       	eor	r27, r27

000003b2 <__utoa_common>:
 3b2:	fb 01       	movw	r30, r22
 3b4:	55 27       	eor	r21, r21
 3b6:	aa 27       	eor	r26, r26
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	aa 1f       	adc	r26, r26
 3be:	a4 17       	cp	r26, r20
 3c0:	10 f0       	brcs	.+4      	; 0x3c6 <__utoa_common+0x14>
 3c2:	a4 1b       	sub	r26, r20
 3c4:	83 95       	inc	r24
 3c6:	50 51       	subi	r21, 0x10	; 16
 3c8:	b9 f7       	brne	.-18     	; 0x3b8 <__utoa_common+0x6>
 3ca:	a0 5d       	subi	r26, 0xD0	; 208
 3cc:	aa 33       	cpi	r26, 0x3A	; 58
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <__utoa_common+0x20>
 3d0:	a9 5d       	subi	r26, 0xD9	; 217
 3d2:	a1 93       	st	Z+, r26
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	79 f7       	brne	.-34     	; 0x3b6 <__utoa_common+0x4>
 3d8:	b1 11       	cpse	r27, r1
 3da:	b1 93       	st	Z+, r27
 3dc:	11 92       	st	Z+, r1
 3de:	cb 01       	movw	r24, r22
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <strrev>

000003e2 <strrev>:
 3e2:	dc 01       	movw	r26, r24
 3e4:	fc 01       	movw	r30, r24
 3e6:	67 2f       	mov	r22, r23
 3e8:	71 91       	ld	r23, Z+
 3ea:	77 23       	and	r23, r23
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <strrev+0x4>
 3ee:	32 97       	sbiw	r30, 0x02	; 2
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <strrev+0x18>
 3f2:	7c 91       	ld	r23, X
 3f4:	6d 93       	st	X+, r22
 3f6:	70 83       	st	Z, r23
 3f8:	62 91       	ld	r22, -Z
 3fa:	ae 17       	cp	r26, r30
 3fc:	bf 07       	cpc	r27, r31
 3fe:	c8 f3       	brcs	.-14     	; 0x3f2 <strrev+0x10>
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
