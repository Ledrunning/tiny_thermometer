
digitalThermometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000062c  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080008c  0080008c  000006ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021bb  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000903  00000000  00000000  00002a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf9  00000000  00000000  0000332a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00003f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001385  00000000  00000000  000047b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e2       	ldi	r30, 0x2C	; 44
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 38       	cpi	r26, 0x8C	; 140
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e8       	ldi	r26, 0x8C	; 140
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 39       	cpi	r26, 0x96	; 150
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1d d2       	rcall	.+1082   	; 0x494 <main>
  5a:	e6 c2       	rjmp	.+1484   	; 0x628 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcdSendNibble>:
    while (lcdIsBusy());

    lcdRawSendByte((0b00011000 | dir), LCD_COMMAND);
    pos--;
  }
}
  5e:	97 b3       	in	r25, 0x17	; 23
  60:	97 60       	ori	r25, 0x07	; 7
  62:	97 bb       	out	0x17, r25	; 23
  64:	97 b3       	in	r25, 0x17	; 23
  66:	98 67       	ori	r25, 0x78	; 120
  68:	97 bb       	out	0x17, r25	; 23
  6a:	c1 98       	cbi	0x18, 1	; 24
  6c:	66 23       	and	r22, r22
  6e:	11 f0       	breq	.+4      	; 0x74 <lcdSendNibble+0x16>
  70:	c0 9a       	sbi	0x18, 0	; 24
  72:	01 c0       	rjmp	.+2      	; 0x76 <lcdSendNibble+0x18>
  74:	c0 98       	cbi	0x18, 0	; 24
  76:	c2 9a       	sbi	0x18, 2	; 24
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	97 78       	andi	r25, 0x87	; 135
  7c:	98 bb       	out	0x18, r25	; 24
  7e:	83 fd       	sbrc	r24, 3
  80:	c6 9a       	sbi	0x18, 6	; 24
  82:	82 fd       	sbrc	r24, 2
  84:	c5 9a       	sbi	0x18, 5	; 24
  86:	81 fd       	sbrc	r24, 1
  88:	c4 9a       	sbi	0x18, 4	; 24
  8a:	80 fd       	sbrc	r24, 0
  8c:	c3 9a       	sbi	0x18, 3	; 24
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <lcdSendNibble+0x32>
  94:	00 00       	nop
  96:	c2 98       	cbi	0x18, 2	; 24
  98:	08 95       	ret

0000009a <lcdRawSendByte>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c8 2f       	mov	r28, r24
  a0:	d6 2f       	mov	r29, r22
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	db df       	rcall	.-74     	; 0x5e <lcdSendNibble>
  a8:	6d 2f       	mov	r22, r29
  aa:	8c 2f       	mov	r24, r28
  ac:	d8 df       	rcall	.-80     	; 0x5e <lcdSendNibble>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <lcdInit>:
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcdInit+0x4>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcdInit+0xa>
  be:	00 00       	nop
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	cc df       	rcall	.-104    	; 0x5e <lcdSendNibble>
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcdInit+0x16>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcdInit+0x1c>
  d0:	00 00       	nop
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	e1 df       	rcall	.-62     	; 0x9a <lcdRawSendByte>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdInit+0x28>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	d8 df       	rcall	.-80     	; 0x9a <lcdRawSendByte>
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__stack+0xf>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__stack+0x15>
  f4:	00 00       	nop
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	cf df       	rcall	.-98     	; 0x9a <lcdRawSendByte>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__stack+0x21>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__stack+0x27>
 106:	00 00       	nop
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	c6 df       	rcall	.-116    	; 0x9a <lcdRawSendByte>
 10e:	08 95       	ret

00000110 <lcdSetCursor>:
 110:	ef ec       	ldi	r30, 0xCF	; 207
 112:	f7 e0       	ldi	r31, 0x07	; 7
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdSetCursor+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcdSetCursor+0xa>
 11a:	00 00       	nop
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8c 60       	ori	r24, 0x0C	; 12
 120:	bc df       	rcall	.-136    	; 0x9a <lcdRawSendByte>
 122:	08 95       	ret

00000124 <lcdSetDisplay>:
 124:	ef ec       	ldi	r30, 0xCF	; 207
 126:	f7 e0       	ldi	r31, 0x07	; 7
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdSetDisplay+0x4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdSetDisplay+0xa>
 12e:	00 00       	nop
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	88 60       	ori	r24, 0x08	; 8
 134:	b2 df       	rcall	.-156    	; 0x9a <lcdRawSendByte>
 136:	08 95       	ret

00000138 <lcdClear>:
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdClear+0x4>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdClear+0xa>
 142:	00 00       	nop
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	a8 df       	rcall	.-176    	; 0x9a <lcdRawSendByte>
 14a:	08 95       	ret

0000014c <lcdGotoXY>:
 14c:	ef ec       	ldi	r30, 0xCF	; 207
 14e:	f7 e0       	ldi	r31, 0x07	; 7
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcdGotoXY+0x4>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcdGotoXY+0xa>
 156:	00 00       	nop
 158:	82 95       	swap	r24
 15a:	88 0f       	add	r24, r24
 15c:	88 0f       	add	r24, r24
 15e:	80 7c       	andi	r24, 0xC0	; 192
 160:	86 0f       	add	r24, r22
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 68       	ori	r24, 0x80	; 128
 166:	99 df       	rcall	.-206    	; 0x9a <lcdRawSendByte>
 168:	08 95       	ret

0000016a <lcdPuts>:

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
  while (*str) {
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z
 172:	22 23       	and	r18, r18
 174:	69 f0       	breq	.+26     	; 0x190 <lcdPuts+0x26>
 176:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcdPuts+0x12>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcdPuts+0x18>
 182:	00 00       	nop
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 91       	ld	r24, Y+
 188:	88 df       	rcall	.-240    	; 0x9a <lcdRawSendByte>

/*
  Выводит строку из RAM в позицию курсора.
 */
void lcdPuts(char *str) {
  while (*str) {
 18a:	88 81       	ld	r24, Y
 18c:	81 11       	cpse	r24, r1
 18e:	f4 cf       	rjmp	.-24     	; 0x178 <lcdPuts+0xe>
    while (lcdIsBusy());

    lcdRawSendByte(*str++, LCD_DATA);
  }
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <print_humidity>:
		_delay_ms(1000);
	}
}

void print_humidity(char* buffer)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	if(humidityResult < 100) {
 19c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <humidityResult>
 1a0:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <humidityResult+0x1>
 1a4:	84 36       	cpi	r24, 0x64	; 100
 1a6:	91 05       	cpc	r25, r1
 1a8:	d0 f4       	brcc	.+52     	; 0x1de <print_humidity+0x48>
		lcdGotoXY(0,0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	ce df       	rcall	.-100    	; 0x14c <lcdGotoXY>
		lcdPuts("H= ");
 1b0:	80 e6       	ldi	r24, 0x60	; 96
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	da df       	rcall	.-76     	; 0x16a <lcdPuts>
		lcdGotoXY(0,3);
 1b6:	63 e0       	ldi	r22, 0x03	; 3
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	c8 df       	rcall	.-112    	; 0x14c <lcdGotoXY>
		itoa(humidityResult, buffer, DOZEN);
 1bc:	4a e0       	ldi	r20, 0x0A	; 10
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	be 01       	movw	r22, r28
 1c2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <humidityResult>
 1c6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <humidityResult+0x1>
 1ca:	f1 d1       	rcall	.+994    	; 0x5ae <itoa>
		lcdPuts(buffer);
 1cc:	ce 01       	movw	r24, r28
 1ce:	cd df       	rcall	.-102    	; 0x16a <lcdPuts>
		lcdGotoXY(0, 5);
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	bb df       	rcall	.-138    	; 0x14c <lcdGotoXY>
		lcdPuts("%");
 1d6:	84 e6       	ldi	r24, 0x64	; 100
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	c7 df       	rcall	.-114    	; 0x16a <lcdPuts>
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <print_humidity+0x7a>
	}
	else {
		lcdGotoXY(0,0);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	b4 df       	rcall	.-152    	; 0x14c <lcdGotoXY>
		lcdPuts("H=");
 1e4:	86 e6       	ldi	r24, 0x66	; 102
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	c0 df       	rcall	.-128    	; 0x16a <lcdPuts>
		lcdGotoXY(0,2);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	ae df       	rcall	.-164    	; 0x14c <lcdGotoXY>
		itoa(humidityResult, buffer, DOZEN);
 1f0:	4a e0       	ldi	r20, 0x0A	; 10
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	be 01       	movw	r22, r28
 1f6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <humidityResult>
 1fa:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <humidityResult+0x1>
 1fe:	d7 d1       	rcall	.+942    	; 0x5ae <itoa>
		lcdPuts(buffer);
 200:	ce 01       	movw	r24, r28
 202:	b3 df       	rcall	.-154    	; 0x16a <lcdPuts>
		lcdGotoXY(0, 5);
 204:	65 e0       	ldi	r22, 0x05	; 5
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	a1 df       	rcall	.-190    	; 0x14c <lcdGotoXY>
		lcdPuts("%");
 20a:	84 e6       	ldi	r24, 0x64	; 100
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	ad df       	rcall	.-166    	; 0x16a <lcdPuts>
	}
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <request>:
	}
}

void request()  {
	
	DDRD |= (1<<DHT22_PIN);
 216:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT22_PIN);    /* set to low pin */
 218:	96 98       	cbi	0x12, 6	; 18
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9c e9       	ldi	r25, 0x9C	; 156
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <request+0x8>
 222:	00 c0       	rjmp	.+0      	; 0x224 <request+0xe>
 224:	00 00       	nop
	_delay_ms(20);            /* wait for 20ms */
	PORTD |= (1<<DHT22_PIN);	/* set to high pin */
 226:	96 9a       	sbi	0x12, 6	; 18
 228:	08 95       	ret

0000022a <response>:
}

void response()	{
	
	DDRD &= ~(1<<DHT22_PIN);
 22a:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT22_PIN));
 22c:	86 99       	sbic	0x10, 6	; 16
 22e:	fe cf       	rjmp	.-4      	; 0x22c <response+0x2>
	while((PIND & (1<<DHT22_PIN))==0);
 230:	86 9b       	sbis	0x10, 6	; 16
 232:	fe cf       	rjmp	.-4      	; 0x230 <response+0x6>
	while(PIND & (1<<DHT22_PIN));
 234:	86 99       	sbic	0x10, 6	; 16
 236:	fe cf       	rjmp	.-4      	; 0x234 <response+0xa>
}
 238:	08 95       	ret

0000023a <receive_data>:

uint8_t receive_data() {
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	90 e0       	ldi	r25, 0x00	; 0
	
	int q;
	for (q=0; q<8; q++)	{
		while((PIND & (1<<DHT22_PIN)) == 0);  /* check received bit 0 or 1 */
 23e:	86 9b       	sbis	0x10, 6	; 16
 240:	fe cf       	rjmp	.-4      	; 0x23e <receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	20 e5       	ldi	r18, 0x50	; 80
 244:	2a 95       	dec	r18
 246:	f1 f7       	brne	.-4      	; 0x244 <receive_data+0xa>
		_delay_us(30);
		if(PIND & (1<<DHT22_PIN))/* if high pulse is greater than 30ms */
 248:	86 9b       	sbis	0x10, 6	; 16
 24a:	07 c0       	rjmp	.+14     	; 0x25a <receive_data+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 24c:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <__data_end>
 250:	22 0f       	add	r18, r18
 252:	21 60       	ori	r18, 0x01	; 1
 254:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__data_end>
 258:	05 c0       	rjmp	.+10     	; 0x264 <receive_data+0x2a>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 25a:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <__data_end>
 25e:	22 0f       	add	r18, r18
 260:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__data_end>
		while(PIND & (1<<DHT22_PIN));
 264:	86 99       	sbic	0x10, 6	; 16
 266:	fe cf       	rjmp	.-4      	; 0x264 <receive_data+0x2a>
 268:	01 97       	sbiw	r24, 0x01	; 1
}

uint8_t receive_data() {
	
	int q;
	for (q=0; q<8; q++)	{
 26a:	49 f7       	brne	.-46     	; 0x23e <receive_data+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT22_PIN));
	}
	return c;
}
 26c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 270:	08 95       	ret

00000272 <get_checksum>:

int get_checksum() {
	
	return lowByteRh + highByteRh + lowByteTemp + highByteTemp;
 272:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <lowByteRh>
 276:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <highByteRh>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	82 0f       	add	r24, r18
 27e:	91 1d       	adc	r25, r1
 280:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <lowByteTemp>
 284:	82 0f       	add	r24, r18
 286:	91 1d       	adc	r25, r1
 288:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <highByteTemp>
}
 28c:	82 0f       	add	r24, r18
 28e:	91 1d       	adc	r25, r1
 290:	08 95       	ret

00000292 <print_error>:

void print_error() {
	lcdGotoXY(0,0);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	5a df       	rcall	.-332    	; 0x14c <lcdGotoXY>
	lcdPuts("Sens    ");
 298:	89 e6       	ldi	r24, 0x69	; 105
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	66 df       	rcall	.-308    	; 0x16a <lcdPuts>
	lcdGotoXY(1,0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	54 df       	rcall	.-344    	; 0x14c <lcdGotoXY>
	lcdPuts("Err     ");
 2a4:	82 e7       	ldi	r24, 0x72	; 114
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	60 df       	rcall	.-320    	; 0x16a <lcdPuts>
 2aa:	08 95       	ret

000002ac <print_negative_temperature>:
		lcdGotoXY(0, 5);
		lcdPuts("%");
	}
}

void print_negative_temperature(char* buffer, int negativeTemp) {
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	8c 01       	movw	r16, r24
 2ba:	9b 01       	movw	r18, r22

	int negativeData = negativeTemp/DEC;
 2bc:	cb 01       	movw	r24, r22
 2be:	6a e0       	ldi	r22, 0x0A	; 10
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	62 d1       	rcall	.+708    	; 0x588 <__divmodhi4>
 2c4:	eb 01       	movw	r28, r22
 2c6:	7b 01       	movw	r14, r22
	
	if((abs(negativeTemp) != abs(MINIMUM_TEMP))) {
 2c8:	c9 01       	movw	r24, r18
 2ca:	99 23       	and	r25, r25
 2cc:	24 f4       	brge	.+8      	; 0x2d6 <print_negative_temperature+0x2a>
 2ce:	88 27       	eor	r24, r24
 2d0:	99 27       	eor	r25, r25
 2d2:	82 1b       	sub	r24, r18
 2d4:	93 0b       	sbc	r25, r19
 2d6:	88 97       	sbiw	r24, 0x28	; 40
 2d8:	09 f4       	brne	.+2      	; 0x2dc <print_negative_temperature+0x30>
 2da:	63 c0       	rjmp	.+198    	; 0x3a2 <print_negative_temperature+0xf6>
		if(abs(negativeData) < abs(NEGATIVE_POINT)) {
 2dc:	ce 01       	movw	r24, r28
 2de:	ff 20       	and	r15, r15
 2e0:	24 f4       	brge	.+8      	; 0x2ea <print_negative_temperature+0x3e>
 2e2:	88 27       	eor	r24, r24
 2e4:	99 27       	eor	r25, r25
 2e6:	8c 1b       	sub	r24, r28
 2e8:	9d 0b       	sbc	r25, r29
 2ea:	0a 97       	sbiw	r24, 0x0a	; 10
 2ec:	0c f0       	brlt	.+2      	; 0x2f0 <print_negative_temperature+0x44>
 2ee:	42 c0       	rjmp	.+132    	; 0x374 <print_negative_temperature+0xc8>
			lcdGotoXY(1,0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	2b df       	rcall	.-426    	; 0x14c <lcdGotoXY>
			lcdPuts("T= ");
 2f6:	8b e7       	ldi	r24, 0x7B	; 123
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	37 df       	rcall	.-402    	; 0x16a <lcdPuts>
			lcdGotoXY(1,3);
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	25 df       	rcall	.-438    	; 0x14c <lcdGotoXY>
			itoa(negativeData, buffer, DEC);
 302:	4a e0       	ldi	r20, 0x0A	; 10
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	b8 01       	movw	r22, r16
 308:	ce 01       	movw	r24, r28
 30a:	51 d1       	rcall	.+674    	; 0x5ae <itoa>
			lcdPuts(buffer);
 30c:	c8 01       	movw	r24, r16
 30e:	2d df       	rcall	.-422    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	1b df       	rcall	.-458    	; 0x14c <lcdGotoXY>
			lcdPuts(" ");
 316:	89 e7       	ldi	r24, 0x79	; 121
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	27 df       	rcall	.-434    	; 0x16a <lcdPuts>
			lcdGotoXY(1,6);
 31c:	66 e0       	ldi	r22, 0x06	; 6
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	15 df       	rcall	.-470    	; 0x14c <lcdGotoXY>
			lcdPuts("C ");
 322:	8f e7       	ldi	r24, 0x7F	; 127
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	21 df       	rcall	.-446    	; 0x16a <lcdPuts>
			
			if(negativeData == 0){
 328:	ef 28       	or	r14, r15
 32a:	e1 f5       	brne	.+120    	; 0x3a4 <print_negative_temperature+0xf8>
				
				lcdGotoXY(1,0);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0d df       	rcall	.-486    	; 0x14c <lcdGotoXY>
				lcdPuts("T= ");
 332:	8b e7       	ldi	r24, 0x7B	; 123
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	19 df       	rcall	.-462    	; 0x16a <lcdPuts>
				lcdGotoXY(1,3);
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	07 df       	rcall	.-498    	; 0x14c <lcdGotoXY>
				itoa(negativeData, buffer, DEC);
 33e:	4a e0       	ldi	r20, 0x0A	; 10
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	b8 01       	movw	r22, r16
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	32 d1       	rcall	.+612    	; 0x5ae <itoa>
				lcdPuts(buffer);
 34a:	c8 01       	movw	r24, r16
 34c:	0e df       	rcall	.-484    	; 0x16a <lcdPuts>
				lcdGotoXY(1,4);
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	fc de       	rcall	.-520    	; 0x14c <lcdGotoXY>
				lcdPuts(".");
 354:	82 e8       	ldi	r24, 0x82	; 130
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 df       	rcall	.-496    	; 0x16a <lcdPuts>
				lcdGotoXY(1,5);
 35a:	65 e0       	ldi	r22, 0x05	; 5
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	f6 de       	rcall	.-532    	; 0x14c <lcdGotoXY>
				lcdPuts("0");
 360:	84 e8       	ldi	r24, 0x84	; 132
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 df       	rcall	.-508    	; 0x16a <lcdPuts>
				lcdGotoXY(1,6);
 366:	66 e0       	ldi	r22, 0x06	; 6
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	f0 de       	rcall	.-544    	; 0x14c <lcdGotoXY>
				lcdPuts("C ");
 36c:	8f e7       	ldi	r24, 0x7F	; 127
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc de       	rcall	.-520    	; 0x16a <lcdPuts>
 372:	18 c0       	rjmp	.+48     	; 0x3a4 <print_negative_temperature+0xf8>
			}
		}
		else {
			lcdGotoXY(1,0);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	e9 de       	rcall	.-558    	; 0x14c <lcdGotoXY>
			lcdPuts("T=");
 37a:	86 e8       	ldi	r24, 0x86	; 134
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	f5 de       	rcall	.-534    	; 0x16a <lcdPuts>
			lcdGotoXY(1,2);
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	e3 de       	rcall	.-570    	; 0x14c <lcdGotoXY>
			itoa(negativeData, buffer, DEC);
 386:	4a e0       	ldi	r20, 0x0A	; 10
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	b8 01       	movw	r22, r16
 38c:	ce 01       	movw	r24, r28
 38e:	0f d1       	rcall	.+542    	; 0x5ae <itoa>
			lcdPuts(buffer);
 390:	c8 01       	movw	r24, r16
 392:	eb de       	rcall	.-554    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	d9 de       	rcall	.-590    	; 0x14c <lcdGotoXY>
			lcdPuts("C ");
 39a:	8f e7       	ldi	r24, 0x7F	; 127
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	e5 de       	rcall	.-566    	; 0x16a <lcdPuts>
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <print_negative_temperature+0xf8>
		}
	}
	else {
		print_error();
 3a2:	77 df       	rcall	.-274    	; 0x292 <print_error>
	}
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	08 95       	ret

000003b2 <print_temperature>:

void print_temperature(char* buffer, uint16_t temp_after_point)
{
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	ec 01       	movw	r28, r24
 3c0:	7b 01       	movw	r14, r22
	uint16_t temperatureData = temperatureResult / DOZEN;
 3c2:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <temperatureResult>
 3c6:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <temperatureResult+0x1>
 3ca:	6a e0       	ldi	r22, 0x0A	; 10
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	c8 d0       	rcall	.+400    	; 0x560 <__udivmodhi4>
 3d0:	06 2f       	mov	r16, r22
 3d2:	17 2f       	mov	r17, r23
 3d4:	86 2f       	mov	r24, r22
 3d6:	97 2f       	mov	r25, r23
	
	if(temperatureData != MAXIMUM_TEMP) {
 3d8:	80 35       	cpi	r24, 0x50	; 80
 3da:	91 05       	cpc	r25, r1
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <print_temperature+0x2e>
 3de:	52 c0       	rjmp	.+164    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		
		if(temperatureData < DEC) {
 3e0:	0a 97       	sbiw	r24, 0x0a	; 10
 3e2:	40 f5       	brcc	.+80     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			lcdGotoXY(1,0);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	b1 de       	rcall	.-670    	; 0x14c <lcdGotoXY>
			lcdPuts("T= ");
 3ea:	8b e7       	ldi	r24, 0x7B	; 123
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	bd de       	rcall	.-646    	; 0x16a <lcdPuts>
			lcdGotoXY(1,3);
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	ab de       	rcall	.-682    	; 0x14c <lcdGotoXY>
			itoa(temperatureData, buffer, DEC);
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	be 01       	movw	r22, r28
 3fc:	80 2f       	mov	r24, r16
 3fe:	91 2f       	mov	r25, r17
 400:	d6 d0       	rcall	.+428    	; 0x5ae <itoa>
			lcdPuts(buffer);
 402:	ce 01       	movw	r24, r28
 404:	b2 de       	rcall	.-668    	; 0x16a <lcdPuts>
			lcdGotoXY(1,4);
 406:	64 e0       	ldi	r22, 0x04	; 4
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	a0 de       	rcall	.-704    	; 0x14c <lcdGotoXY>
			lcdPuts(".");
 40c:	82 e8       	ldi	r24, 0x82	; 130
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	ac de       	rcall	.-680    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 412:	65 e0       	ldi	r22, 0x05	; 5
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	9a de       	rcall	.-716    	; 0x14c <lcdGotoXY>
			itoa(temp_after_point, buffer, DEC);
 418:	4a e0       	ldi	r20, 0x0A	; 10
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	be 01       	movw	r22, r28
 41e:	c7 01       	movw	r24, r14
 420:	c6 d0       	rcall	.+396    	; 0x5ae <itoa>
			lcdPuts(buffer);
 422:	ce 01       	movw	r24, r28
 424:	a2 de       	rcall	.-700    	; 0x16a <lcdPuts>
			lcdGotoXY(1,6);
 426:	66 e0       	ldi	r22, 0x06	; 6
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 de       	rcall	.-736    	; 0x14c <lcdGotoXY>
			lcdPuts("C");
 42c:	89 e8       	ldi	r24, 0x89	; 137
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	9c de       	rcall	.-712    	; 0x16a <lcdPuts>
 432:	29 c0       	rjmp	.+82     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		}
		else {
			lcdGotoXY(1,0);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	89 de       	rcall	.-750    	; 0x14c <lcdGotoXY>
			lcdPuts("T=");
 43a:	86 e8       	ldi	r24, 0x86	; 134
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	95 de       	rcall	.-726    	; 0x16a <lcdPuts>
			lcdGotoXY(1,2);
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	83 de       	rcall	.-762    	; 0x14c <lcdGotoXY>
			itoa(temperatureData, buffer, DEC);
 446:	4a e0       	ldi	r20, 0x0A	; 10
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	be 01       	movw	r22, r28
 44c:	80 2f       	mov	r24, r16
 44e:	91 2f       	mov	r25, r17
 450:	ae d0       	rcall	.+348    	; 0x5ae <itoa>
			lcdPuts(buffer);
 452:	ce 01       	movw	r24, r28
 454:	8a de       	rcall	.-748    	; 0x16a <lcdPuts>
			lcdGotoXY(1,4);
 456:	64 e0       	ldi	r22, 0x04	; 4
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	78 de       	rcall	.-784    	; 0x14c <lcdGotoXY>
			lcdPuts(".");
 45c:	82 e8       	ldi	r24, 0x82	; 130
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	84 de       	rcall	.-760    	; 0x16a <lcdPuts>
			lcdGotoXY(1,5);
 462:	65 e0       	ldi	r22, 0x05	; 5
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	72 de       	rcall	.-796    	; 0x14c <lcdGotoXY>
			itoa(temp_after_point, buffer, DEC);
 468:	4a e0       	ldi	r20, 0x0A	; 10
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	be 01       	movw	r22, r28
 46e:	c7 01       	movw	r24, r14
 470:	9e d0       	rcall	.+316    	; 0x5ae <itoa>
			lcdPuts(buffer);
 472:	ce 01       	movw	r24, r28
 474:	7a de       	rcall	.-780    	; 0x16a <lcdPuts>
			lcdGotoXY(1,6);
 476:	66 e0       	ldi	r22, 0x06	; 6
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	68 de       	rcall	.-816    	; 0x14c <lcdGotoXY>
			lcdPuts("C");
 47c:	89 e8       	ldi	r24, 0x89	; 137
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	74 de       	rcall	.-792    	; 0x16a <lcdPuts>
 482:	01 c0       	rjmp	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		}
	}
	else {
		print_error();
 484:	06 df       	rcall	.-500    	; 0x292 <print_error>
	}
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	08 95       	ret

00000494 <main>:
// if (highByteTemp >> 7 & 1) { temperatureResult *= -1; }
// РњР°СЃРєРё РґРѕСЃС‚Р°С‚РѕС‡РЅРѕ, РЅРѕ РЅСѓР¶РЅР° РјР°СЃРєР° & 0x7F С‡С‚РѕР±С‹ Р·РЅР°РєРѕРІС‹Р№ Р±РёС‚ РѕР±РЅСѓР»РёС‚СЊ
//РќСѓ РёР»Рё С‚СѓРїРѕ 
//if (temp > 0x7FFF)
//  Signtemp = -(0x7FFF & temp)
int main(void) {
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	dd 27       	eor	r29, r29
 49c:	c6 50       	subi	r28, 0x06	; 6
 49e:	cd bf       	out	0x3d, r28	; 61
	char tBuffer[STRING_SIZE], hBuffer[STRING_SIZE];
	uint16_t temp_buffer;
	uint16_t temp_buffer_after_point;
	int negativeTemp;

	lcdInit();
 4a0:	09 de       	rcall	.-1006   	; 0xb4 <lcdInit>
	lcdClear();
 4a2:	4a de       	rcall	.-876    	; 0x138 <lcdClear>
	lcdSetDisplay(LCD_DISPLAY_ON);
 4a4:	84 e0       	ldi	r24, 0x04	; 4
 4a6:	3e de       	rcall	.-900    	; 0x124 <lcdSetDisplay>
	lcdSetCursor(LCD_CURSOR_OFF);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	32 de       	rcall	.-924    	; 0x110 <lcdSetCursor>
		/* (DHTdata[0] + DHTdata[1] + DHTdata[2] + DHTdata[3]) & 255) will = DHTdata[4] IF the checksum is good. */
		if ((get_checksum() & 255) != checkSum) {
			print_error();
		}
		else {
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 4ac:	0f 2e       	mov	r0, r31
 4ae:	fa e0       	ldi	r31, 0x0A	; 10
 4b0:	ef 2e       	mov	r14, r31
 4b2:	f1 2c       	mov	r15, r1
 4b4:	f0 2d       	mov	r31, r0
	lcdSetDisplay(LCD_DISPLAY_ON);
	lcdSetCursor(LCD_CURSOR_OFF);
	
	while (1) {

		request();		/* send start pulse */
 4b6:	af de       	rcall	.-674    	; 0x216 <request>
		response();		/* receive response */
 4b8:	b8 de       	rcall	.-656    	; 0x22a <response>
		[1] RH decimal
		[2] Temp integral
		[3] Temp decimal
		[4] checksum is the sum of all four bytes AND 255
		*/
		lowByteRh=receive_data();	/* store first eight bit in I_RH */
 4ba:	bf de       	rcall	.-642    	; 0x23a <receive_data>
 4bc:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <lowByteRh>
		highByteRh=receive_data();	/* store next eight bit in D_RH */
 4c0:	bc de       	rcall	.-648    	; 0x23a <receive_data>
 4c2:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <highByteRh>
		lowByteTemp=receive_data();	/* store next eight bit in I_Temp */
 4c6:	b9 de       	rcall	.-654    	; 0x23a <receive_data>
 4c8:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <lowByteTemp>
		highByteTemp=receive_data();	/* store next eight bit in D_Temp */
 4cc:	b6 de       	rcall	.-660    	; 0x23a <receive_data>
 4ce:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <highByteTemp>
		checkSum=receive_data();/* store next eight bit in CheckSum */
 4d2:	b3 de       	rcall	.-666    	; 0x23a <receive_data>
 4d4:	18 2f       	mov	r17, r24
 4d6:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <checkSum>
		
		/* (DHTdata[0] + DHTdata[1] + DHTdata[2] + DHTdata[3]) & 255) will = DHTdata[4] IF the checksum is good. */
		if ((get_checksum() & 255) != checkSum) {
 4da:	cb de       	rcall	.-618    	; 0x272 <get_checksum>
 4dc:	99 27       	eor	r25, r25
 4de:	21 2f       	mov	r18, r17
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	82 17       	cp	r24, r18
 4e4:	93 07       	cpc	r25, r19
 4e6:	11 f0       	breq	.+4      	; 0x4ec <main+0x58>
			print_error();
 4e8:	d4 de       	rcall	.-600    	; 0x292 <print_error>
 4ea:	30 c0       	rjmp	.+96     	; 0x54c <main+0xb8>
		}
		else {
			humidityResult = (lowByteRh * 256 + highByteRh ) / DOZEN;
 4ec:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <lowByteRh>
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	98 2f       	mov	r25, r24
 4f4:	88 27       	eor	r24, r24
 4f6:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <highByteRh>
 4fa:	82 0f       	add	r24, r18
 4fc:	91 1d       	adc	r25, r1
 4fe:	b7 01       	movw	r22, r14
 500:	43 d0       	rcall	.+134    	; 0x588 <__divmodhi4>
 502:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <humidityResult+0x1>
 506:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <humidityResult>
			print_humidity(hBuffer);
 50a:	ce 01       	movw	r24, r28
 50c:	04 96       	adiw	r24, 0x04	; 4
 50e:	43 de       	rcall	.-890    	; 0x196 <print_humidity>
			temperatureResult = (lowByteTemp * 256 + highByteTemp );
 510:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <lowByteTemp>
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	98 2f       	mov	r25, r24
 518:	88 27       	eor	r24, r24
 51a:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <highByteTemp>
 51e:	82 0f       	add	r24, r18
 520:	91 1d       	adc	r25, r1
 522:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <temperatureResult+0x1>
 526:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <temperatureResult>
			
			if(temperatureResult > TEMP_MASK) {
 52a:	99 23       	and	r25, r25
 52c:	4c f4       	brge	.+18     	; 0x540 <main+0xac>
				negativeTemp = -(TEMP_MASK & temperatureResult); /* shoud be devide by DOZEN */
				print_negative_temperature(tBuffer, negativeTemp);
 52e:	9f 77       	andi	r25, 0x7F	; 127
 530:	66 27       	eor	r22, r22
 532:	77 27       	eor	r23, r23
 534:	68 1b       	sub	r22, r24
 536:	79 0b       	sbc	r23, r25
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	b7 de       	rcall	.-658    	; 0x2ac <print_negative_temperature>
 53e:	06 c0       	rjmp	.+12     	; 0x54c <main+0xb8>
			}
			else {
				temp_buffer = temperatureResult;
				temp_buffer_after_point = temp_buffer % DOZEN;
				print_temperature(tBuffer, temp_buffer_after_point);
 540:	b7 01       	movw	r22, r14
 542:	0e d0       	rcall	.+28     	; 0x560 <__udivmodhi4>
 544:	bc 01       	movw	r22, r24
 546:	ce 01       	movw	r24, r28
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	33 df       	rcall	.-410    	; 0x3b2 <print_temperature>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54c:	2f ef       	ldi	r18, 0xFF	; 255
 54e:	89 e6       	ldi	r24, 0x69	; 105
 550:	98 e1       	ldi	r25, 0x18	; 24
 552:	21 50       	subi	r18, 0x01	; 1
 554:	80 40       	sbci	r24, 0x00	; 0
 556:	90 40       	sbci	r25, 0x00	; 0
 558:	e1 f7       	brne	.-8      	; 0x552 <main+0xbe>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <main+0xc8>
 55c:	00 00       	nop
 55e:	ab cf       	rjmp	.-170    	; 0x4b6 <main+0x22>

00000560 <__udivmodhi4>:
 560:	aa 1b       	sub	r26, r26
 562:	bb 1b       	sub	r27, r27
 564:	51 e1       	ldi	r21, 0x11	; 17
 566:	07 c0       	rjmp	.+14     	; 0x576 <__udivmodhi4_ep>

00000568 <__udivmodhi4_loop>:
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	a6 17       	cp	r26, r22
 56e:	b7 07       	cpc	r27, r23
 570:	10 f0       	brcs	.+4      	; 0x576 <__udivmodhi4_ep>
 572:	a6 1b       	sub	r26, r22
 574:	b7 0b       	sbc	r27, r23

00000576 <__udivmodhi4_ep>:
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	5a 95       	dec	r21
 57c:	a9 f7       	brne	.-22     	; 0x568 <__udivmodhi4_loop>
 57e:	80 95       	com	r24
 580:	90 95       	com	r25
 582:	bc 01       	movw	r22, r24
 584:	cd 01       	movw	r24, r26
 586:	08 95       	ret

00000588 <__divmodhi4>:
 588:	97 fb       	bst	r25, 7
 58a:	07 2e       	mov	r0, r23
 58c:	16 f4       	brtc	.+4      	; 0x592 <__divmodhi4+0xa>
 58e:	00 94       	com	r0
 590:	06 d0       	rcall	.+12     	; 0x59e <__divmodhi4_neg1>
 592:	77 fd       	sbrc	r23, 7
 594:	08 d0       	rcall	.+16     	; 0x5a6 <__divmodhi4_neg2>
 596:	e4 df       	rcall	.-56     	; 0x560 <__udivmodhi4>
 598:	07 fc       	sbrc	r0, 7
 59a:	05 d0       	rcall	.+10     	; 0x5a6 <__divmodhi4_neg2>
 59c:	3e f4       	brtc	.+14     	; 0x5ac <__divmodhi4_exit>

0000059e <__divmodhi4_neg1>:
 59e:	90 95       	com	r25
 5a0:	81 95       	neg	r24
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	08 95       	ret

000005a6 <__divmodhi4_neg2>:
 5a6:	70 95       	com	r23
 5a8:	61 95       	neg	r22
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255

000005ac <__divmodhi4_exit>:
 5ac:	08 95       	ret

000005ae <itoa>:
 5ae:	45 32       	cpi	r20, 0x25	; 37
 5b0:	51 05       	cpc	r21, r1
 5b2:	18 f4       	brcc	.+6      	; 0x5ba <itoa+0xc>
 5b4:	42 30       	cpi	r20, 0x02	; 2
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <itoa+0xc>
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <__itoa_ncheck>
 5ba:	fb 01       	movw	r30, r22
 5bc:	10 82       	st	Z, r1
 5be:	cb 01       	movw	r24, r22
 5c0:	08 95       	ret

000005c2 <__itoa_ncheck>:
 5c2:	bb 27       	eor	r27, r27
 5c4:	4a 30       	cpi	r20, 0x0A	; 10
 5c6:	31 f4       	brne	.+12     	; 0x5d4 <__itoa_ncheck+0x12>
 5c8:	99 23       	and	r25, r25
 5ca:	22 f4       	brpl	.+8      	; 0x5d4 <__itoa_ncheck+0x12>
 5cc:	bd e2       	ldi	r27, 0x2D	; 45
 5ce:	90 95       	com	r25
 5d0:	81 95       	neg	r24
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <__utoa_common>

000005d6 <__utoa_ncheck>:
 5d6:	bb 27       	eor	r27, r27

000005d8 <__utoa_common>:
 5d8:	fb 01       	movw	r30, r22
 5da:	55 27       	eor	r21, r21
 5dc:	aa 27       	eor	r26, r26
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	aa 1f       	adc	r26, r26
 5e4:	a4 17       	cp	r26, r20
 5e6:	10 f0       	brcs	.+4      	; 0x5ec <__utoa_common+0x14>
 5e8:	a4 1b       	sub	r26, r20
 5ea:	83 95       	inc	r24
 5ec:	50 51       	subi	r21, 0x10	; 16
 5ee:	b9 f7       	brne	.-18     	; 0x5de <__utoa_common+0x6>
 5f0:	a0 5d       	subi	r26, 0xD0	; 208
 5f2:	aa 33       	cpi	r26, 0x3A	; 58
 5f4:	08 f0       	brcs	.+2      	; 0x5f8 <__utoa_common+0x20>
 5f6:	a9 5d       	subi	r26, 0xD9	; 217
 5f8:	a1 93       	st	Z+, r26
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	79 f7       	brne	.-34     	; 0x5dc <__utoa_common+0x4>
 5fe:	b1 11       	cpse	r27, r1
 600:	b1 93       	st	Z+, r27
 602:	11 92       	st	Z+, r1
 604:	cb 01       	movw	r24, r22
 606:	00 c0       	rjmp	.+0      	; 0x608 <strrev>

00000608 <strrev>:
 608:	dc 01       	movw	r26, r24
 60a:	fc 01       	movw	r30, r24
 60c:	67 2f       	mov	r22, r23
 60e:	71 91       	ld	r23, Z+
 610:	77 23       	and	r23, r23
 612:	e1 f7       	brne	.-8      	; 0x60c <strrev+0x4>
 614:	32 97       	sbiw	r30, 0x02	; 2
 616:	04 c0       	rjmp	.+8      	; 0x620 <strrev+0x18>
 618:	7c 91       	ld	r23, X
 61a:	6d 93       	st	X+, r22
 61c:	70 83       	st	Z, r23
 61e:	62 91       	ld	r22, -Z
 620:	ae 17       	cp	r26, r30
 622:	bf 07       	cpc	r27, r31
 624:	c8 f3       	brcs	.-14     	; 0x618 <strrev+0x10>
 626:	08 95       	ret

00000628 <_exit>:
 628:	f8 94       	cli

0000062a <__stop_program>:
 62a:	ff cf       	rjmp	.-2      	; 0x62a <__stop_program>
